


;NOMBRE: GET_DIR
;OBJETIVO: COLOCA EN DIR_ACTUAL LA DIRECCION QUE CORRESPONDA SEGUN EL MODO DE
;          DE FUNCIONAMIENTO.
;ENTRADA:  (MODO_GET_DIR)  -> SI  VALE  GET_DIR_KEY ENTONCES RECOGE EL
;                             VALOR DEL TECLADO
;                          -> SI  VALE  GET_DIR_BUFF ENTONCES RECOGE EL
;                             VALOR DEL BUFFER DIR_BUFF A PARTIR DEL PUNTERO
;                             PTR_GET_DIR, INCREMENTADO EL MISMO. EN CASO
;                             DE QUE LLEGUE AL FINAL DEL BUFFER DEVUELVE UN 1
;                             EN A, EN CASO CONTRARIO SERA UN 0.
;                          -> SI VALE   GET_DIR_VAL ACTUA IGUAL QUE EL ANTERIOR
;                             PERO NO INCRENENTA EL PUNTERO.
;          (HANDLE_EKB)    -> CONTIENE LA RUTINA QUE SE ENCARGA DE MANEJAR EL
;                             ERROR DE FIN DE BUFFER. ESTO SE DETECTA CUANDO
;                             HAYA UN $FF EN EL BUFFER.
;SI SE USA EL MODO 1 O 2 ES OBLIGATORIO PONER UN MANEJADOR Y COLOCAR UN BUFFER.
;GUARDANDO SIEMPRE LOS VALORES ANTERIORES, Y EN EL MANEJADOR SALTANDO AL
;ANTERIOR SI DE NUEVO SE LEE 255
;MODIFICA: AF,BC


GET_FUNC:	
	XOR	A	;PARCHEO
	LD	(GET_DIROP2),A
	LD	(GET_DIROP1),A
	LD	HL,FUNC_ACT
	LD	(GET_DIROP4+1),HL

	LD	DE,(PTR_EXCP)
	PUSH	DE
	POP	IX
	LD	HL,STREXCP_PTR
	ADD	HL,DE
	LD	C,L
	LD	B,H
	LD	HL,STREXCP_BUF
	ADD	HL,DE
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	EXX
	LD	DE,BUFFER_FUNC
	LD	HL,FUNC_ACT
	CALL	GET_KEY
	LD	A,2	;COLOCO EL LD (BC),A
	LD	(GET_DIROP2),A
	LD	A,12h
	LD	(GET_DIROP1),A
	LD	HL,DIR_ACTUAL
	LD	(GET_DIROP4+1),HL
	RET


GET_DIR:	
	CALL	GET_KEYBOARD
	LD	HL,DIR_ACTUAL
	LD	A,(HL)
	AND	10000111b	;ELIMINO LOS BITS DE FUNCION
	LD	(HL),A
	RET


GET_KEYBOARD:	
	LD	DE,(PTR_EXCP)
	PUSH	DE
	POP	IX
	LD	HL,STREXCP_PTR
	ADD	HL,DE
	LD	C,L
	LD	B,H
	LD	HL,STREXCP_BUF
	ADD	HL,DE
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	EXX

	LD	DE,BUFFER_INT	;
	LD	HL,DIR_ACTUAL	;

GET_KEY	LD	A,(IX+STREXCP_MOD)
	CP	GET_DIR_KEY
	JR	NZ,GET_DIR1

	DI
	LD	A,(DE)
	LD	B,A
	LD	(HL),A
	LD	A,80h
GET_DIROP1	LD	(DE),A
	EI
	RET

GET_DIR1	EX	AF,AF'
	EXX
	LD	A,(BC)
	LD	E,A
	LD	D,0
	ADD	HL,DE
	EX	AF,AF'
	CP	GET_DIR_BUFF
	JR	NZ,GET_DIR2

	LD	A,E
	INC	A
GET_DIROP2	LD	(BC),A

GET_DIR2	LD	A,(HL)
	LD	L,(IX+STREXCP_HAND)
	LD	H,(IX+STREXCP_HAND+1)
	CP	0FFh
	JR	NZ,GET_DIR3
	JP	(HL)

GET_DIROP4
GET_DIR3	LD	(DIR_ACTUAL),A
	RET


HANDLE_EKB:		DW	HANDLE_DEF	;ESTO TAMBIEN TENGO QUE INICIALIZARLO
PTR_GET_DIR:	DB	0
MODO_GET_DIR:	DB	0
DIR_BUFF:		DW	0


STACK_EXC:		DS	STRUCTEXCEP*5
PTR_EXCP:		DW	HANDLE_EKB	;SI QUIEROHACER REENTRANTE EL CODIGO
;                                       ;TENGO QUE INICIALIZAR ESTOS VALORES


HANDLE_DEF:	RET


;NOMBRE: ADD_EXCP
;OBJETIVO: AGNADE UN ENTORNO A LA PILA DE EXCEPCIONES A PARTIR DEL ENTORNO
;          ACTUAL. SI NO SE HA RESTAURADO CORRECTAMENTE EL ESTADO DE LA PILA
;          ES POSIBLE QUE SE PIERDA INFORMACION
;ENTRADA:  DE -> DIRECCION DE LA RUTINA DE SERVICIO DE LA EXCEPCION
;          HL -> DIRECCION DEL BUFFER DONDE SE ALMACENAN LOS DATOS
;          A  -> MODO DE LECTURA DE LA DIRECCION
;          BC -> DIRECCION DEL BUFFER DONDE SE ALMACENAN LOS DATOS DE LAS
;                FUNCIONES.

ADD_EXCP:	PUSH	BC
	LD	IX,(PTR_EXCP)
	LD	BC,STRUCTEXCEP
	ADD	IX,BC
	LD	(PTR_EXCP),IX
	LD	(IX+STREXCP_HAND),E
	LD	(IX+STREXCP_HAND+1),D
	LD	(IX+STREXCP_MOD),A
	XOR	A
	LD	(IX+STREXCP_PTR),A
	LD	(IX+STREXCP_PTRF),A
	LD	(IX+STREXCP_BUF),L
	LD	(IX+STREXCP_BUF+1),H
	POP	BC
	LD	(IX+STREXCP_BUFF),C
	LD	(IX+STREXCP_BUFF+1),B
	RET


;NOMBRE: UP_EXCP
;OBJETIVO: CAMBIA EL ENTORNO DE EXCEPCIONES UNO HACIA ARRIBA (DECREMENTA EL PUNTERO)

UP_EXCP:	LD	HL,(PTR_EXCP)
	LD	DE,-STRUCTEXCEP
	ADD	HL,DE
	LD	(PTR_EXCP),HL
	RET


;NOMBRE: DW_EXCP
;OBJETIVO: DECREMENTAR EL ENTORNO DE EXCEPCIONES (AUMENTA EL PUNTERO)

DW_EXCP:	LD	HL,(PTR_EXCP)
	LD	DE,STRUCTEXCEP
	ADD	HL,DE
	LD	(PTR_EXCP),HL
	RET



;NOMBRE: TEST_FUNC
;OBJETIVO: COMPRUEBA SI SE HA PULSADO UNA TECLA DE FUNCION. SI SE HA PULSADO
;          ESPERA HASTA EL FINAL DE LA PULSACION.
;ENTRADA: A -> TECLA DE FUNCION CHEQUEADA
;SALIDA:  A -> 0 SI NO SE HA PULSADO, 1 EN CASO CONTRARIO
;


TEST_FUNC:	
	PUSH	AF
	CALL	GET_FUNC
	LD	A,(FUNC_ACT)
	POP	BC
	AND	B
	RET



;NOMBRE: LEETECLA
;OBJETIVO: DEVUELVE LA DIRECCION PULSADA EN EL TECLADO. SI NO SE HA PULSADO
;          NADA PONE EL BIT 7 A 1.
;MODIFICA: AF,BC

;;; Esta funcion se puede optimizar, comprobar si han cambiadolas filas y si
;;; No se ha recogido la ultima tecla 
;;; (si no han cambiado y no se ha recogido -> salir)
;;; (si se ha recogido (o es noTecla) -> ejecutar)
;;; Para poder hacerlo bien es necesario partir la funcion de la siguiente manera:
;;; Cada 3 interrupciones se leen las dos filas.Despues se llaman a 2 funciones
;;; Una para direccion y otra para acciones.
	
		
LEETECLA:
	LD HL,KEY_TIME
	DEC (HL)
	RET NZ
	LD A,3
	LD (HL),A
			

LEEF	XOR	A
	LD	(LEETFUNC),A

	LD	A,6       
	CALL	LEE_FILA_KB	
	CPL
	AND	00100000b
	LD	B,A
	LD	A,(KEY_F1ST)
	XOR	B
	AND	B
	JP	Z,LEEF1
	LD	A,F1_KEY
	LD	(LEETFUNC),A
	
LEEF1	LD	A,B
	LD	(KEY_F1ST),A

LEETA1	
	LD	A,8
	CALL	LEE_FILA_KB
	
	LD	C,A
	CPL
	AND	00000001b
	LD	B,A
	LD	A,(KEY_SPST)
	XOR	B
	AND	B
	JP	Z,LEESP
	LD	A,SPC_KEY
	LD	(LEETFUNC),A
LEESP	LD	A,B
	LD	(KEY_SPST),A

LEET0	LD	A,80h
	BIT	4,C	;IZQUIERDA
	JP	NZ,LEET1

	LD	A,(MOV_DIG)
	OR	A
	LD	A,IZQUIERDA
	JP	Z,LEET2

	BIT	5,C	;IZQUIERDA ARRIBA
	LD	A,ARR_IZQ
	JP	Z,LEETFIN

	BIT	6,C	;IZQUIERDA ABAJO
	LD	A,ABA_IZQ
	JP	Z,LEETFIN

	LD	A,IZQUIERDA
	JP	LEETFIN


LEET1	BIT	7,C	;DERECHA
	JP	NZ,LEET2

	LD	A,(MOV_DIG)
	OR	A
	LD	A,DERECHA
	JP	Z,LEET2

	BIT	5,C	;DERECHA ARRIBA
	LD	A,ARR_DER
	JP	Z,LEETFIN

	BIT	6,C	;DERECHA ABAJO
	LD	A,ABA_DER
	JP	Z,LEETFIN

	LD	A,DERECHA
	JP	LEETFIN


LEET2	BIT	5,C	;ARRIBA
	JP	NZ,LEET3
	LD	A,ARRIBA
	JP	LEETFIN


LEET3	BIT	6,C	;ABAJO
	JP	NZ,LEETFIN
	LD	A,ABAJO
	JP	LEETFIN


LEETFIN	
	LD	B,A
	LD	(LEETECLAV),A
	RET



KEY_ROW1:	DB	0
KEY_ROW2:	DB	0		
KEY_TIME:	DB      4	; Este valor hay que inicializarlo
KEY_SPST:	DB	0
KEY_F1ST:	DB	0
LEETECLAV:	DB	0
LEETFUNC:	DB	0
MOV_DIG:	DB	0

	
	
	
	
;NOMBRE: LEE_FILA_KB
;OBJETIVO: ESTA FUNCION LEE EL ESTADO DE LA FILA DEL TECLADO
;ENTRADA:  A-> FILA QUE SE LEE
;SALIDA: A-> ESTADO DE LA FILA
;MODIFICA: AF,B

LEE_FILA_KB:	DI
	LD	B,A
	IN	A,(0AAh)
	AND	0F0h
	OR	B
	OUT	(0AAh),A
	IN	A,(0A9h)
	EI
	RET
