;NOMBRE: TURNO_PJS
;OBJETIVO: FUNCION SE ENCARGA DE GESTIONAR EL TURNO DE PJS EN EL MODO DE EXTERIOR
;          ESTA FUNCION NO RETORNA HASTA QUE SE HAN EMPLEADO TODOS LOS PJS.


TURNO_PJS:	LD	HL,(PTR_PERSO)
	LD	(PUT_X_PERSO),HL

	LD	A,2
	LD	(WRITE_CONT),A

	LD	A,3
	LD	(TURNO_PJC),A

TURNO_PJ2	CALL	PUT_X
TURNO_PJ1	LD	A,F1_KEY
	CALL	TEST_FUNC
	OR	A
	CALL	NZ,SHOW_PJS
	LD	A,1
	LD	B,0
	CALL	MOVE_EXT
	CALL	SELEC_PJ
	OR	A
	JR	Z,TURNO_PJ1

	CALL	MAKE_PJ
	LD	HL,(PUT_X_PERSO)
	LD	DE,STRUCTPERSO
	ADD	HL,DE
	LD	(PUT_X_PERSO),HL
;              CALL TTURN_END
;              JR TURNO_PJ3
	LD	HL,TURNO_PJC
	DEC	(HL)
	JR	NZ,TURNO_PJ2
	JR	TURNO_PJS
	RET

TURNO_PJC:	DB	0





;PDATAPJ

PDATAPJ:	PUSH	AF

	LD	HL,0
	ADD	HL,SP
	LD	(PDATAPJ_SP),HL

	LD	HL,INDEXPERSO
	SLA	A
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)


	PUSH	DE
	POP	IX
	LD	E,(IX+STRPER_TIPO)
	LD	D,0
	LD	HL,STRUCTTIPOP
	CALL	MULTHLDE
	LD	DE,TIPOS_VEC
	ADD	HL,DE
	PUSH	HL
	POP	IY

	LD	L,(IX+STRPER_MON)
	LD	H,(IX+STRPER_MON+1)
	PUSH	HL
	LD	L,(IX+STRPER_PEX)
	LD	H,(IX+STRPER_PEX+1)
	PUSH	HL
	LD	L,(IX+STRPER_PAR)
	LD	H,0
	PUSH	HL
	LD	L,(IY+STRTIPE_PMV)
	PUSH	HL
	LD	L,(IX+STRPER_PMV)
	PUSH	HL
	LD	L,(IY+STRTIPE_PATQ)
	PUSH	HL
	LD	L,(IX+STRPER_PVTQ)
	PUSH	HL
	LD	L,(IY+STRTIPE_PV)
	LD	H,(IY+STRTIPE_PV+1)
	PUSH	HL
	LD	L,(IX+STRPER_PV)
	LD	H,(IX+STRPER_PV+1)
	PUSH	HL
	LD	L,(IX+STRPER_NIV)
	LD	H,0
	PUSH	HL
	PUSH	IY
	POP	HL
	LD	DE,STRTIPE_NOM
	ADD	HL,DE
	PUSH	HL

	LD	HL,PDATAPJS
	LD	A,(PAG_NACT)
	LD	DE,5020h
	CALL	PRINTF

	LD	HL,(PDATAPJ_SP)
	LD	SP,HL
	POP	AF
	RET


PDATAPJ_SP:	DW	0
PDATAPJS:	DB	"%8%s%l%n%nLEVEL     %d5%nHP:    %d5/%d5b%nSP:      %d3/%d3b%n"
		DB	"MP:      %d3/%d3b%nAP:         %d3%n"
		DB	"EP:       %d5%nMONEY:    %d5"
		DB    0

	
	
;NOMBRE: SHOW_PERS
;OBJETIVO: MOSTRAR LAS CARACTERISSTICAS DE  LOS PJS

SHOW_PERS:	PUSH	AF
	CALL	WAIT_COM
	LD	A,(PAG_NACT)
	LD	B,A
	LD	A,0DDh
	LD	HL,LIMPIA_SCR
	CALL	LIMPIA_PAN


	POP	AF
	CALL	PDATAPJ
	LD	L,A
	LD	H,0
	LD	DE,40
	CALL	MULTHLDE
	LD	A,L

	LD	(SHOW_PJD),A
	LD	A,(PAG_NACT)
	LD	(SHOW_PJD+7),A
	CALL	WAIT_COM
	LD	HL,SHOW_PJD
	CALL	COPYVRAM


	CALL	HIDE_CRUZ
	CALL	CLOSE_WIN
	DI
	LD	HL,PAL_MARK
	LD	(PAL_GMP),HL
	LD	A,1
	LD	(CHANGE_PAL),A
	EI
		
	CALL	OPEN_WIN
	RET


SHOW_PJD:	DB	0,0,128,PAG_OBJETOS,30,0,30,0,40,0,40,0,0,0,98h	
	
		
	
	
;NOMBRE: SHOW_PJS
;OBJETIVO: GESTIONAR LA VISUALIZACION DE LOS PERSONAJES

SHOW_PJS:	LD	A,4
	LD	(WRITE_CONT),A

	XOR	A
	LD	(SHOW_PJP),A
	LD	(SHOW_DIR),A


SHOW_PJSC:	
	CALL	SWAP_PAGE
	CALL	ERASE_PNA

	XOR	A
	LD	(SHOW_DIR),A
	LD	A,(SHOW_PJP)
SHOW_PJS1:	EX	AF,AF'
	XOR	A	;LIMPIO EL BUFFER
	LD	(BUFFER_FUNC),A
	EX	AF,AF'
	CALL	SHOW_PERS
SHOW_PJS2:	CALL	ASK_OUT

	LD	A,F1_KEY
	CALL	TEST_FUNC
	OR	A
	JR	NZ,SHOW_PJEND

	LD	A,SPC_KEY
	CALL	TEST_FUNC
	OR	A
	LD	A,(SHOW_PJP)
	JR	Z,GEST_INV00
	CALL	GEST_INV
	JR	SHOW_PJSC


GEST_INV00	CALL	GET_DIR
	LD	A,(SHOW_PJP)
	LD	C,A
	LD	A,(SHOW_DIR)
	LD	B,A
	LD	A,(DIR_ACTUAL)
	LD	(SHOW_DIR),A
	CP	B
	JR	Z,SHOW_PJS2


	CP	DERECHA
	JR	NZ,SHOW_PJI
	LD	A,C
	INC	A
	JR	SHOW_PJSC2

SHOW_PJI	CP	IZQUIERDA
	JR	NZ,SHOW_PJS2
	LD	A,C
	DEC	A


SHOW_PJSC2:	CP	-1
	JR	NZ,SHOW_PJSC3
	JR	SHOW_PJS2

SHOW_PJSC3	CP	MAXNUMPJS
	JR	Z,SHOW_PJS2
	LD	(SHOW_PJP),A
	JR	SHOW_PJS1



SHOW_PJEND:	LD	HL,(MAPEAPTR)
	LD	C,NUMPATY
	LD	A,255
SHOW_PJE2	LD	B,NUMPATX
SHOW_PJE1	LD	(HL),A
	INC	HL
	DJNZ	SHOW_PJE1

	DEC	C
	JR	NZ,SHOW_PJE2

	CALL	WAIT_COM
	LD	A,(PAG_NACT)
	LD	B,A
	LD	A,0DDh
	LD	HL,LIMPIA_SCR
	CALL	LIMPIA_PAN

	LD	A,4
	LD	(WRITE_CONT),A
	LD	A,2
	LD	(MAPEACONT),A
	CALL	VIEW_PERSO
	CALL	MAPRUT
	CALL	WRITE_PNA

	CALL	CLOSE_WIN

	DI
	LD	HL,PAL_GM
	LD	(PAL_GMP),HL
	LD	A,1
	LD	(CHANGE_PAL),A
	EI

	CALL	OPEN_WIN
	RET



SHOW_PJP:	DB	0
SHOW_DIR:	DB	0

	
	
	
;NOMBRE: SHOW_INV
;OBJETIVO: MOSTRAR EL INVENTARIO DE UN PERSONAJE. Y EL EQUIPO PUESTO
;ENTRADA: A -> NUMERO DEL PERSOANJE



SHOW_INV:	LD	HL,INDEXPERSO
	SLA	A
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)


	PUSH	DE
	POP	IX
	LD	E,(IX+STRPER_TIPO)
	LD	D,0
	LD	HL,STRUCTTIPOP
	CALL	MULTHLDE
	LD	DE,TIPOS_VEC
	ADD	HL,DE
	PUSH	HL
	POP	IY
	LD	A,(IY+STRTIPE_INV)

	LD	(INV_PERS),IX
	LD	(INV_TIPO),IY


	LD	L,A
	LD	H,0
	LD	DE,15	;TAMAGNO DEL INVENTARIO
	CALL	MULTHLDE
	LD	DE,INVENTARIOV
	ADD	HL,DE
	LD	(INV_ACT),HL

	LD	A,(IY+STRTIPE_EQUI)
	LD	L,A
	LD	H,0
	LD	DE,8	;TAMAGNO DE EQUIPO PUESTO
	CALL	MULTHLDE
	LD	DE,EQUIPOV
	ADD	HL,DE
	LD	(EQUIPO_ACT),HL


	LD	C,2	;PRIMERO EL EQUIPO PUESTO Y LUEGO EL
	LD	B,8	;INVENTARIO
	XOR	A
SHOW_IPO	PUSH	HL
	PUSH	BC
	PUSH	AF
	LD	C,(HL)
	CALL	PUT_OBJI
	POP	AF
	POP	BC
	POP	HL
	INC	A
	INC	HL
	DJNZ	SHOW_IPO
	LD	B,15	;EL NUMERO DE ELEMENTOS DEL INVENTARIO
	LD	HL,(INV_ACT)
	DEC	C
	JR	NZ,SHOW_IPO


	CALL	CLOSE_WIN

	DI
	LD	HL,PAL_GM
	LD	(PAL_GMP),HL
	LD	A,1
	LD	(CHANGE_PAL),A
	EI
	
	CALL	OPEN_WIN
	RET

INV_PERS:	DW	0
INV_TIPO:	DW	0



;NOMBRE: MAKE_INV
;OBJETIVO: PINTAR EN PANTALLA LA PANTALLA DE VISUALIZACION DE INVENTARIO


MAKE_INV:	
	CALL	WAIT_COM
	LD	A,(PAG_NACT)
	LD	(SHOWINVD+7),A
	LD	B,A
	LD	A,0DDh
	LD	HL,LIMPIA_SCR
	CALL	LIMPIA_PAN

	LD	A,112
	LD	(SHOWINVD),A
	LD	A,72
	LD	(SHOWINVD+4),A
	LD	A,40
	LD	(SHOWINVD+6),A
	CALL	WAIT_COM
	LD	HL,SHOWINVD
	CALL	COPYVRAM

	LD	HL,SHOWINVB
	LD	B,2
MAKE_INVBA	PUSH	BC
	LD	A,(PAG_NACT)
	LD	D,(HL)
	INC	HL
	LD	E,(HL)
	INC	HL
	PUSH	HL
	EX	DE,HL
	LD	B,A
	LD	E,8
	LD	D,8
	CALL	PAINT_BALD
	POP	HL
	POP	BC
	DJNZ	MAKE_INVBA


	LD	B,21
MAKE_INVBBP:	PUSH	BC
	LD	A,(PAG_NACT)
	LD	B,A
	LD	D,(HL)
	INC	HL
	LD	E,(HL)
	INC	HL
	PUSH	HL
	EX	DE,HL
	LD	E,16
	LD	D,E
	CALL	PAINT_BALD
	POP	HL
	POP	BC
	DJNZ	MAKE_INVBBP




	LD	B,8
	LD	IX,SHOWINVL
MAKE_INVBL	PUSH	BC
	LD	L,(IX)
	LD	H,(IX+1)
	LD	E,(IX+2)
	LD	D,(IX+3)
	LD	C,12
	LD	B,0
	LD	A,(PAG_NACT)
	CALL	LINE
	LD	DE,4
	ADD	IX,DE
	POP	BC
	DJNZ	MAKE_INVBL


	RET



SHOWINVD:	DB	0,0,COORDY_OBJ,PAG_OBJETOS,112,0,24,0,32,0,64,0,0,0,0D0h
SHOWINVB:	DB	22,60,22,72
SHOWINVB16:	DB	40,40,40,62,40,84,120,40,120,62,120,84
SHOWINVN:	DB	176,24,176,42,176,60,176,78,176,96
	DB	194,24,194,42,194,60,194,78,194,96
	DB	212,24,212,42,212,60,212,78,212,96



SHOWINVL:	DW	58*256+47,88*256+50
	DW	58*256+70,76*256+73
	DW	58*256+92,87*256+95
	DW	88*256+42,117*256+47
	DW	87*256+62,117*256+69
	DW	99*256+73,117*256+90
	DW	31*256+65,38*256+65
	DW	31*256+74,38*256+74






;NOMBRE: PAINT_BALD
;OBJETIVO: PINTAR UNA BALDOSA
;ENTRADA: B -> PAGINA
;         E -> ANCHO
;         D -> ALTO
;         H -> COORDENADA X
;         L -> COORDENADA Y



PAINT_BALD:	LD	IX,PAINT_BALDC
	LD	A,B
	LD	(PAINT_PAGE),A
	LD	(IX+4),E
	LD	(IX+6),D
	LD	(IX+0),H
	LD	(IX+2),L

	DEC	H
	DEC	L

	LD	A,H
	ADD	A,D
	INC	A
	LD	D,A

	LD	A,L
	ADD	A,E
	INC	A
	LD	E,A


	LD	(PAINT_BDL1),HL
	LD	(PAINT_BDL2),HL
	LD	(PAINT_BDL3),DE
	LD	(PAINT_BDL4),DE
	LD	A,E
	LD	E,L
	LD	(PAINT_BDL1+2),DE
	LD	(PAINT_BDL3+2),DE
	LD	E,A
	LD	D,H
	LD	(PAINT_BDL2+2),DE
	LD	(PAINT_BDL4+2),DE


	CALL	WAIT_COM
	LD	A,(PAINT_PAGE)
	LD	B,A
	LD	A,55h
	LD	HL,PAINT_BALDC
	CALL	LIMPIA_PAN

	LD	B,4
	LD	IX,PAINT_BDL1
PAINT_BLDJ1	PUSH	BC
	LD	L,(IX)
	LD	H,(IX+1)
	LD	E,(IX+2)
	LD	D,(IX+3)
	LD	C,(IX+4)
	LD	B,0
      CALL  WAIT_COM
      LD	A,(PAG_NACT)
	CALL	LINE
	LD	DE,5
	ADD	IX,DE


	POP	BC
	DJNZ	PAINT_BLDJ1
	RET


PAINT_PAGE:	DB	0
PAINT_BALDC:
		DB	0,0,0,0,0,0,0,0,0FFh,0,0C0h
PAINT_BDL1:	DB	0,0,0,0,9
PAINT_BDL2:	DB	0,0,0,0,0
PAINT_BDL3:	DB	0,0,0,0,9
PAINT_BDL4:	DB	0,0,0,0,0



;NOMBRE: SELEC_PJ
;OBJETIVO: VERIFICAR SI SE HA SELECCIONADO UN PERSONAJE Y HACER LOS AJUSTES
;          NECESARIOS
;SALIDA:  A -> INDICA SI HE HA PULSADO SOBRE UN PJ
;         C -> EN CASO DE QUE A SEA 0 INDICA EL PJ SOBR EL QUE SE HA PULSADO


	LD	A,F1_KEY
	CALL	TEST_FUNC
	OR	A
	CALL	NZ,SHOW_PJS

SELEC_PJ:	LD	A,SPC_KEY
	CALL	TEST_FUNC
	OR	A
	RET	Z

	LD	IX,PUT_XPERA	;CARGO LOS PARAMETROS DE LA FUNCION
	LD	DE,(PUT_XPERA+STRPER_Y)
	LD	HL,(PUT_XPERA+STRPER_X)
	LD	A,MAXPERSOM
	CALL	MOVPCHK_COL

	OR	A
	JR	Z,SELEC_PJ1
	LD	A,C
	CP	3
	JR	NC,SELEC_PJ1
	LD	A,1
	RET

SELEC_PJ1	XOR	A
	RET

	

;NOMBRE: INIT_PERV
;OBJETIVO: INICIALIZA LA OCUPACION DEL VECTOR DE PERSONAJES QUE SE LE INDICA
;          A 0.
;ENTRADA: L -> NUMERO DE VECTOR
;MODIFICA:


INIT_PERV:	LD	BC,SIZ_STRPERVC+SIZ_STRPERVM
	LD	HL,STRPER_VECMAP
	XOR	A
INIT_PERV1	LD	(HL),A
	INC	HL
	DEC	C
	JR	NZ,INIT_PERV1
	DEC	B
	JR	NZ,INIT_PERV1
	RET

	
	
	
;NOMBRE: INITPJS
;OBJETIVO: INICIALIZA A LOS PJS.


INITPJS:	LD	B,3
	XOR	A
	LD	DE,(MAPEADO_DAT+STRMAP_XDEF)
	LD	HL,(MAPEADO_DAT+STRMAP_YDEF)


INITPJS1	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL

	LD	C,L
	LD	B,H
	LD	L,0
	LD	H,A

	CALL	INITPERSO
	POP	HL
	POP	DE

	LD	A,(MODO_GAME)
	CP	INTERIOR
	JR	Z,INITPJS2
	LD	BC,32
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL

INITPJS2	POP	BC
	POP	AF
	INC	A

	DJNZ	INITPJS1
	RET


;NOMBRE: MOVPJS
;OBJETIVO: REALIZAR EL MOVIMIENTO DE LOS PJS
;ENTRADA: B -> INDICA DIRECCION DEL PRIMERO (PARA NO MOVER EN DICHO CASO)
;

MOVPJS:	BIT	7,B
	JR	Z,MOVPJSS

	LD	B,0
MOVPJSN:	LD	A,B
	LD	E,80h
	PUSH	BC
	CALL	MOVPERSO
	POP	BC
	INC	B
	LD	A,MAXNUMPJS
	CP	B
	JR	NZ,MOVPJSN
	RET

MOVPJSS	LD	A,(MOVPJSPTR)
	LD	D,00H
	LD	E,A
	LD	HL,MOVPJSWAY
	ADD	HL,DE
	LD	(HL),B
	LD	B,0
MOVPJSS1	PUSH	BC
	PUSH	DE
	LD	E,(HL)
	LD	A,B
	CALL	MOVPERSO

	POP	DE
	LD	A,E
	SUB	RETARDOPJS
	AND	TAM_FIFO-1
	LD	E,A
	LD	D,0
	LD	HL,MOVPJSWAY
	ADD	HL,DE
	POP	BC
	INC	B
	LD	A,MAXNUMPJS
	CP	B
	JR	NZ,MOVPJSS1

	LD	A,(SWAP_CONT)
	OR	A
	RET	NZ

	LD	A,(MOVPJSPTR)
	INC	A
	AND	TAM_FIFO-1
	LD	(MOVPJSPTR),A
	RET


MOVPJSWAY	DS	TAM_FIFO
MOVPJSPTR	DB	0		
	
	
		
	
;NOMBRE:   INIT_INDEXPER
;OBJETIVO: INICIALIZA EL VECTOR DE INDIZAMIENTO DE UNA CIUDAD
;ENTRADA:  L -> NUMERO DE CIUDAD
;                  SI L ES IGUAL A 0 SE REFIERE AL MAPA DE EXTERIORES
;MODIFICA: B,HL,DE,IX
;          ACTUALIZA EL VALOR DE PTR_PERSO


INIT_INDEXPER:	LD	B,L
	LD	H,0
	LD	DE,STRPER_VECMAP
	XOR	A
	OR	B
	JR	Z,INIT_INDP1

	DEC	L
	LD	DE,STRUCTPERSO*MAXPERSOC
	CALL	MULTHLDE
	LD	DE,STRPER_VECCIT
	ADD	HL,DE
	EX	DE,HL

INIT_INDP1	EX	DE,HL
	LD	(PTR_PERSO),HL
	LD	DE,STRUCTPERSO
	LD	IX,INDEXPERSO
	LD	B,MAXPERSOM

INIT_INDP3	LD	(IX),L
	LD	(IX+1),H
	INC	IX
	INC	IX
	ADD	HL,DE
	DJNZ	INIT_INDP3
	RET





	

;NOMBRE: DO_WAY_PER
;OBJETIVO: CALCULAR EL CAMINO DEL PESONAJE Y CONSEGUIR QUE ESTE LO SIGA.
;ENTRADA: C -> NUMERO DE PERSONAJE



DO_WAY_PER:	LD	A,1
	LD	B,0
	CALL	MOVE_EXT

	LD	A,SPC_KEY
	CALL	TEST_FUNC
	OR	A
	JR	Z,DO_WAY_PER

	LD	A,(MAKE_PJPER)
	LD	B,A
	RLCA

	LD	HL,INDEXPERSO
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	PUSH	DE
	PUSH	DE
	POP	IX

	LD	A,B
	LD	B,0
	LD	L,(IX+STRPER_X)
	LD	H,(IX+STRPER_X+1)
	LD	E,(IX+STRPER_Y)
	LD	D,(IX+STRPER_Y+1)
	LD	C,CEN_TOTAL
	CALL	SET_XY

	POP	IX
	LD	HL,(PUT_XPERA+STRPER_Y)
	LD	DE,(PUT_XPERA+STRPER_X)
	;; CALL	A_ESTRELLA	
	CP	-1
	RET	Z

	LD	DE,HANDLE_DEF
	LD	A,GET_DIR_BUFF
	CALL	ADD_EXCP

	LD	A,(MAKE_PJPER)
	LD	C,A
	XOR	A
	LD	B,A
	CALL	MOVE_EXT

	LD	A,GET_DIR_KEY
	LD	(MODO_GET_DIR),A

	LD	A,50
	LD	(TIME_),A
DO_WAY_P1	LD	A,(TIME_)
	OR	A
	JR	NZ,DO_WAY_P1

	LD	A,TIMEFADE
	LD	(FADE_V),A
	CALL	FADE_OFF

	CALL	UP_EXCP
	RET





;NOMBRE: VIEW_PERSO
;OBJETIVO: DETERMINAR QUE PERSONAJES SE VEN Y CUALES NO, Y EN CASO DE  VERSE
;          CALCULAR LAS COORDENADAS RELATIVAS



VIEW_PERSO:	LD	A,(MODO_GAME)
	LD	B,MAXPERSOM
	CP	EXTERIOR
	JR	NZ,VIEW_P1
	LD	B,MAXPERSOC

VIEW_P1	LD	HL,INDEXPERSO
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	PUSH	DE
	POP	IX

	LD	DE,STRUCTPERSO
VIEW_P2	LD	A,(IX+STRPER_OCUP)
	OR	A
	JR	Z,VIEW_P3

	PUSH	DE
	PUSH	BC
	PUSH	IX
	CALL	MOVPVIS
	POP	IX
	POP	BC
	POP	DE

	LD	A,(IX+STRPER_DIR)
	SET	7,A
	LD	(IX+STRPER_DIR),A
VIEW_P3	ADD	IX,DE
	DJNZ	VIEW_P2
	RET



;NOMBRE: MOVEPERSO
;OBJETIVO: MOVER UN PERSONAJE POR EL MAPEADO, INCLUYENDO LA DETECCION DE CHOQUES
;          CONTRA MUROS U OTROS PERSONAJES, ADEMAS DE LA VISUALIZACION EN
;          CASO DE SER NECESARIO.
;ENTRADA: E -> DIRECCION
;         A -> NUMERO DE PERSONAJE
;         B -> SERA 0 SI EL PERSONAJE DIRIGUE EL SCROLL Y OTRO VALOR EN
;              CASO CONTRARIO.
;MODIFUCA: AF,BC,DE,HL,IX,AF',HL'


MOVPERSO:	
	LD	(MOVPPERSO),A
	RLCA	
	LD	C,A

	XOR	A
	LD	(MOVPRETURN),A
	LD	A,B
	LD	(MOVPSCROLL),A

	LD	B,0
	LD	HL,INDEXPERSO
	ADD	HL,BC
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	PUSH	BC
	POP	IX

	LD	A,E
	LD	(MOVPDIRE),A
	SET	7,A
	LD	(IX+STRPER_DIR),A
	LD	L,(IX+STRPER_X)
	LD	H,(IX+STRPER_X+1)
	LD	E,(IX+STRPER_Y)
	LD	D,(IX+STRPER_Y+1)
	LD	A,(MOVPDIRE)
	BIT	7,A
	JR	NZ,MOVPERSOF2

	CALL	MOVPCHK_ACCES
	
	BIT	0,A
	JR	Z,MPNACCESO
	BIT	2,A
	JR	Z,MPACCESO	

	LD	A,(SWAP_CONT)
	OR	A
	JR	NZ,MPNACCESO

	LD	A,(MOVPSCROLL)
	LD	B,A
	LD	A,(MOVPPERSO)
	CALL	FOUND_ENLACE
	OR	A
	JR	Z,MOVPERSOF1
	JR	MOVPERSOF2

MPACCESO	
	LD	A,(MODO_GAME)
	CP	EXTERIOR
	JR	Z,MPACCESO1
	PUSH	HL
	PUSH	DE
	LD	A,(MOVPPERSO)
	CALL	MOVPCHK_COL
	POP	DE
	POP	HL
	OR	A
	JR	NZ,MOVPERSOF2

MPACCESO1	
	LD	(IX+STRPER_X),L
	LD	(IX+STRPER_X+1),H
	LD	(IX+STRPER_Y),E
	LD	(IX+STRPER_Y+1),D

MOVPERSOF1:	
	LD	A,(MOVPDIRE)
	LD	(IX+STRPER_DIR),A

MOVPERSOF2:	
	LD	A,(MOVPSCROLL)
	OR	A
	RET	NZ
	CALL	MAKESCROLL
	CALL	DOSCROLL
	RET


MPNACCESO:	
	LD	A,(MOVPDIRE)
	SET	7,A
	LD	(MOVPDIRE),A
	LD	A,1
	LD	(MOVPRETURN),A

	LD	A,(MOVPSCROLL)
	OR	A
	RET	NZ
	CALL	DOSCROLL

	LD	A,(SCROLLST)
	OR	A
	RET	Z

	XOR	A
	LD	(SCROLLST),A
	INC	A
	LD	(SWAP_CONT),A
	LD	A,INC_MOVS
	LD	(INC_MOV),A
	LD	A,NUMREPFRAMES
	LD	(NUMREPFRAME),A
	LD	A,PERIODOS
	LD	(PERIODO),A
	RET





MOVPSCROLL:	DB	0
MOVPRETURN:	DB	0
MOVPPERSO:	DB	0




;NOMBRE: MOVPCHK_COL
;OBJETIVO: COMPROBAR SI EXISTE COLISION CON EL PERSONAJE
;ENTRADA: HL -> COORDENADA X
;         DE -> COORDENADA Y
;         A  -> DEBERIA SER EL NUMERO DE PERSONAJE
;         IX -> PUNTERO AL PERSONAJE
;SALIDA: A -> INDICA SI HAY COLISION
;        C -> INDICA EL NUMERO DE PERSONAJE CON EL QUE SE HA COLISIONADO
;             EN CASO DE QUE A == 1

;**************************************************************************
;**************************************************************************
;**************************************************************************

MOVPCHK_COL:	LD	(MOVPVISX),HL	;COMPROBAR ESTA FUNCION MEDIANTE
	LD	(MOVPVISY),DE	;UN DEBUGGER
	LD	HL,INDEXPERSO
	LD	(MOVPCHK_COLA),A	;CREO QUE ESTE VALOR NO SE VUELVE A USAR

	LD	BC,0
	LD	D,0
	LD	E,0
	CP	MAXNUMPJS	;SI ES UN PJ NO COMPROBAR
	JR	NC,MOVPCHKCP1	;COLISION CON OTROS PJS
	LD	BC,2*MAXNUMPJS	;ESTO SOLO DEBE HACERSE EN INTERIOR
	LD	D,MAXNUMPJS
	LD	E,MAXNUMPJS-1

MOVPCHKCP1	
	PUSH	DE
	ADD	HL,BC
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	PUSH	DE
        POP	IY

	LD	BC,STRUCTPERSO
	EXX
	LD	A,(MODO_GAME)
	LD	B,MAXPERSOC
	CP	INTERIOR
	JR	Z,MOVPCHKCP2
	LD	B,MAXPERSOM

MOVPCHKCP2	
	LD	A,B
	POP	DE
	SUB	D	;EN D TENGO EL VALOR QUE DEPENDE
	LD	B,A	;DE QUE EL PERSONAJE SEA PJ

	LD	C,E	;POR LO QUE EN B TENGO EL NUMERO DE ITERACION
;                                        ;Y EN C EL NUMERO DE PERSONAJE CON
;                                        ;EL QUE COMPRUEBO COLISION
MOVPCHKC1:	
      PUSH IX
      POP DE
MOVPCHK_COLB	
	PUSH	IY
	POP	HL
	XOR	A
	SBC	HL,DE
	JR	Z,MOVPCCOL_NC
	LD	A,(IY+STRPER_OCUP)
	OR	A
	JR	Z,MOVPCCOL_NC

	EXX
	LD	DE,(MOVPVISX)
	LD	L,(IY+STRPER_X)
	LD	H,(IY+STRPER_X+1)
	XOR	A
	SBC	HL,DE
	JR	Z,MOVPCOL_Y
	JR	NC,MOVPCOL_XP

	LD	A,L
	CPL
	LD	L,A
	LD	A,H
	CPL
	LD	H,A
	INC	HL
MOVPCOL_XP	LD	DE,(ANCHOPIXPER)
	XOR	A
	SBC	HL,DE
	JR	NC,MOVPCOL_NC1

MOVPCOL_Y:	LD	DE,(MOVPVISY)
	LD	L,(IY+STRPER_Y)
	LD	H,(IY+STRPER_Y+1)
	XOR	A
	SBC	HL,DE
	JR	Z,MOVPCOL_CD
	JR	NC,MOVPCOL_YP

	LD	A,L
	CPL
	LD	L,A
	LD	A,H
	CPL
	LD	H,A
	INC	HL

MOVPCOL_YP	LD	DE,8
	XOR	A
	SBC	HL,DE
	JR	NC,MOVPCOL_NC1

MOVPCOL_CD	EXX
	LD	A,1
	RET


MOVPCCOL_NC	EXX
MOVPCOL_NC1	ADD	IY,BC
	EXX
	INC	C
	DJNZ	MOVPCHK_COLB

	XOR	A
	RET

MOVPCHK_COLA:	DB	0



;NOMBRE: MOVPCHK_ACCES
;OBJETIVO: VERIFICA SI UN PERSONAJE TIENE ACCESO A UNA CASILLA
;          DETERMINADA.
;ENTRADA:  HL -> COORDENADA X INICIAL
;          DE -> COORDENADA Y INICIAL
;          (MOVPDIRE) -> DIRECCION DEL MOVIMIENTO
;          IX  -> PUNTERO AL PERSONAJE
;SALIDA: A -> CARACTERISTICA DE LA CASILLA DESTINO
;        HL -> COORDENADA X FINAL
;        DE -> COORDENADA Y FINAL



MOVPCHK_ACCES:	LD	BC,(PROF_PERSO)
	LD	(MOVPCHK_PROF),BC
	LD	A,(MOVPDIRE)

	LD	(MOVPVISX),HL
	LD	(MOVPVISY),DE

	BIT	7,A
	JR	NZ,MOVPCHKACC2


	CP	ABA_DER
	JR	NZ,MOVPCHKABI
	LD	BC,(INC_MOV)
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	ADD	HL,BC
	JR	MOVPCHKACC2

MOVPCHKABI	CP	ABA_IZQ
	JR	NZ,MOVPCHKARD
	LD	BC,(INC_MOV)
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	OR	A
	SBC	HL,BC
	JR	MOVPCHKACC2

MOVPCHKARD	CP	ARR_DER
	JR	NZ,MOVPCHKARI
	LD	BC,(INC_MOV)
	EX	DE,HL
	OR	A
	SBC	HL,BC
	EX	DE,HL
	ADD	HL,BC
	JR	MOVPCHKACC2


MOVPCHKARI	CP	ARR_IZQ
	JR	NZ,MOVPCHKAI
	LD	BC,(INC_MOV)
	EX	DE,HL
	OR	A
	SBC	HL,BC
	EX	DE,HL
	OR	A
	SBC	HL,BC
	JR	MOVPCHKACC2


MOVPCHKAI	CP	IZQUIERDA
	JR	NZ,MOVPCHKAD
	LD	BC,(INC_MOV)
	OR	A
	SBC	HL,BC
	JR	MOVPCHKACC2

MOVPCHKAD	CP	DERECHA
	JR	NZ,MOVPCHKAR
	LD	BC,(INC_MOV)
	ADD	HL,BC
	JR	MOVPCHKACC2

MOVPCHKAR	CP	ARRIBA
	JR	NZ,MOVPCHKAB
	LD	BC,(INC_MOV)
	EX	DE,HL
	OR	A
	SBC	HL,BC
	EX	DE,HL
	LD	BC,(PROF_PERSOAR)
	LD	(MOVPCHK_PROF),BC
	JR	MOVPCHKACC2

MOVPCHKAB	CP	ABAJO
	JR	NZ,MOVPCHKACC2
	LD	BC,(INC_MOV)
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL

MOVPCHKACC2	PUSH	HL
	PUSH	DE
	EX	DE,HL
	LD	BC,(MOVPCHK_PROF)
	ADD	HL,BC
	EX	DE,HL

	LD	B,3
MOVPCHKACC3	SRL	D
	RR	E
	DJNZ	MOVPCHKACC3

	LD	A,(MODO_GAME)
	CP	INTERIOR
	JR	Z,MOVPCHKACC31
	LD	A,0FEh
	AND	E
	LD	E,A
	LD	A,(ALTOPATPER)
	INC	A
	LD	C,A
	LD	B,0
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL


MOVPCHKACC31	LD	C,0
	LD	B,3
MOVPCHKACC4	SRL	H
	RR	L
	RR	C
	DJNZ	MOVPCHKACC4

	PUSH	BC
	PUSH	HL
	LD	HL,INDEXMAPA
	SLA	E
	RL	D
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	POP	HL
	ADD	HL,DE

	PUSH	HL
	LD	DE,(PROP_PTR)
	LD	A,(HL)
	LD	H,0
	LD	L,A
	ADD	HL,DE

	LD	A,(HL)
	LD	(MOVPCHK_PRO1),A
	EX	AF,AF'
	POP	HL
	LD	DE,(ANCHOPATPER)
	DEC	E
	LD	D,0
	ADD	HL,DE
	POP	BC
	XOR	A
	OR	C
	JR	Z,MOVPCHKACC5
	INC	HL

MOVPCHKACC5:	LD	C,(HL)
	LD	H,0
	LD	L,C
	LD	DE,(PROP_PTR)
	ADD	HL,DE
	LD	A,(HL)
	LD	(MOVPCHK_PRO2),A
	LD	B,A
	EX	AF,AF'
	AND	B
	BIT	0,A
	POP	DE
	POP	HL
	JR	Z,MOVPCHKACC6
	RET


MOVPCHKACC6:	LD	HL,(MOVPVISX)
	LD	DE,(MOVPVISY)
	RET

MOVPCHK_PROF:	DW	00H
MOVPCHK_PRO1:	DB	00H
MOVPCHK_PRO2:	DB	00H




;NOMBRE: MOVPVIS
;OBJETIVO: DETERMINAR SI EL PERSONAJE SE VE EN PANTALLA O NO Y GESTIONAR
;          COMO SE VE EN PANTALLA, EL MOVIMIENTO ETC...
;ENTRADA: IX -> PUNTERO AL PERSONAJE
;SALIDA:
;MODIFICA: AF,HL,HL',DE,DE',BC
 
MOVPVIS:	LD	BC,-4 
	LD	L,(IX+STRPER_X)
	LD	H,(IX+STRPER_X+1)
	LD	(MOVPVISX),HL

	LD	E,(IX+STRPER_Y)
	LD	D,(IX+STRPER_Y+1)
	LD	A,(MODO_GAME)
	CP	INTERIOR
	JR	Z,MOVPV1
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL


MOVPV1	LD	(MOVPVISY),DE
	LD	DE,(DESP_PANTX)
	SLA	E
	RL	D
	SLA	E
	RL	D
	SLA	E
	RL	D
	XOR	A
	SBC	HL,DE
	JR	C,MOVPVIS_FD

	LD	A,L
	LD	(MOVPVISXR),A
	LD	DE,(MAXVALXR)
	ADD	HL,DE
	JR	C,MOVPVIS_FD

	LD	HL,(MOVPVISY)
	LD	DE,(DESP_PANTY)
	SLA	E
	RL	D
	SLA	E
	RL	D
	SLA	E
	RL	D
	XOR	A
	SBC	HL,DE
	JR	C,MOVPVIS_FD
 
	LD	A,L
	LD	(MOVPVISYR),A
	LD	DE,(MAXVALYR)
	ADD	HL,DE
	JR	C,MOVPVIS_FD

	LD	A,(MOVPVISYR)
	LD	B,A
	LD	A,(MOVPVISXR)
	LD	C,A
	XOR	A
	LD	L,(IX+STRPER_FIG)
	LD	H,(IX+STRPER_FIG+1)
	OR	L
	JR	NZ,MOVPVIS_FC
	OR	H
	JR	NZ,MOVPVIS_FC

	LD	L,(IX+STRPER_PAT)
	LD	H,(IX+STRPER_DIR)
	PUSH	IX
	CALL	INITFIGURA
	POP	IX
	LD	(IX+STRPER_FIG),L
	LD	(IX+STRPER_FIG+1),H

MOVPVIS_FC	
	PUSH	IX
	LD	E,(IX+STRPER_DIR)
	CALL	GFIG_MOVAC
	POP	IX
	CALL	SAVE2PLANE
	RET


MOVPVIS_FD:	LD	E,(IX+STRPER_FIG)
	LD	D,(IX+STRPER_FIG+1)
	XOR	A
	CP	E
	JR	NZ,MOVPVIS_FD1
	CP	D
	RET	Z

MOVPVIS_FD1:	LD	(IX+STRPER_FIG),A
	LD	(IX+STRPER_FIG+1),A
	PUSH	DE
	POP	IX
	LD	(IX+STRFIG_OCUP),A
	RET


MOVPVISXR:	DB	0
MOVPVISYR:	DB	0
MOVPVISX:	DW	0
MOVPVISY:	DW	0
MOVPDIRE:	DB	0


;NOMBRE: INITPERSO
;OBJETIVO: INICIALIZAR UN PERSONAJE DE UN TIPO ESPECIFICO.
;ENTRADA: A -> NUMERO DE PERSONAJE
;         BC -> COORDENADA  Y
;         DE -> COORDENADA  X
;         H -> TIPO DE PERSONAJE
;         L -> DIRECCION DEL PERSONAJE


INITPERSO:	LD	IX,(PTR_PERSO)
	EX	AF,AF'
	LD	A,E
	AND	0E0h
	LD	E,A
	LD	A,C
	AND	0F0h
	ADD	A,4
	LD	C,A


	EX	AF,AF'
	EX	DE,HL
	LD	(INITPERSOX),HL
	LD	H,B
	LD	L,C
	LD	(INITPERSOY),HL

	EX	DE,HL
	LD	DE,STRUCTPERSO
INITPERSO1	OR	A
	JR	Z,INITPERSO2

	ADD	IX,DE
	DEC	A
	JR	INITPERSO1


INITPERSO2:	LD	A,H
	LD	(IX+STRPER_TIPO),H
	LD	(IX+STRPER_DIR),L
	LD	HL,TIPOS_VEC
	LD	DE,STRUCTTIPOP
INITPERSO3	OR	A
	JR	Z,INITPERSO4

	ADD	HL,DE
	DEC	A
	JR	INITPERSO3

INITPERSO4:	PUSH	HL
	LD	HL,(INITPERSOX)
	EX	DE,HL
	LD	HL,(INITPERSOY)

	LD	(IX+STRPER_Y),L
	LD	(IX+STRPER_Y+1),H
	LD	(IX+STRPER_X),E
	LD	(IX+STRPER_X+1),D

	POP	HL
	PUSH	HL
	PUSH	IX
	POP	HL
	LD	BC,STRPER_PV
	ADD	HL,BC
	LD	D,H
	LD	E,L
	LD	BC,STRTIPE_PV
	POP	HL
	ADD	HL,BC
	LD	BC,STRTIPE_INV-STRTIPE_PV
	LDIR

	XOR	A
	LD	(IX+STRPER_FIG),A
	LD	(IX+STRPER_FIG+1),A
	INC	A
	LD	(IX+STRPER_OCUP),A
	RET


INITPERSOX:	DW	0
INITPERSOY:	DW	0

	