	include "../inc/game.inc"
	include "../inc/data.inc"
	include "../inc/debug.inc"


	phase 100h

	LD	HL,0
	ADD	HL,SP
	LD	(STACK_TOP),HL
 
	CALL	INIT_GAME	
	LD	HL,NOMNIVEL
	CALL	LOADNIVEL
	LD	L,1
	CALL	GO_CIUDAD
	;CALL    GO_EXTERIOR

	ld	a,1
	call	PutSng

	CALL	SAEBA
LOOP	CALL	BMODE_INT	
	CALL	BMODE_EXT
	JR	LOOP

STACK_TOP:	DW	0


	


;NOMBRE: BMODE_INT
;OBJETIVO: EJECUTA UNA ITERACION DE INTERIOR SI ESTAMOS EN ESE MODO


BMODE_INT:	LD	A,(MODO_GAME)
	CP	INTERIOR
	RET	NZ
	LD	A,(DIR_ACTUAL)
	LD	B,A
	CALL	MOVPJS
;              CALL    MOVPNJS            ;ESTA TODAVIA SIN IMPLEMENTAR
	CALL	DO_VISUAL
	LD	A,F1_KEY
	CALL	TEST_FUNC
	OR	A
	CALL	NZ,SHOW_PJS
	XOR	A
	LD	(BUFFER_FUNC),A
	RET



;NOMBRE: BMODE_EXT
;OBJETIVO: EJECUTA UNA ITERACION DE EXTERIOR SI ESTAMOS EN ESE MODO

BMODE_EXT:	LD	A,(MODO_GAME)
	CP	EXTERIOR
	RET	NZ
	CALL	TURNO_PJS
;               CALL    TURNO_PNJS
	RET








;NOMBRE: DOCONVER
;OBJETIVO: REALIZAR LAS FUNCIONES NECESARIAS PARA IMPRIMIR EN PANTALLA
;          TODOS LAS CONVERSACIONES QUE SE ESTEN VIENDO EN ESE MOMENTO

DOCONVER:	LD	H,20
	LD	L,20
	CALL	PUTDIALOGO
	RET




;NOMBRE: PUTDIALOGO
;OBJETIVO: PINTAR UN DIALOGO ENTRE DOS PERSONAJES
;H -> COORDENADA X  -> ES LA RELATIVA, PERO SIN EL DESPLAZAMIENTO DE LA  P
;Y -> COORDENADA Y  ->  IDEM


PUTDIALOGO:	LD	A,OFF_PANTX
	ADD	A,H
	LD	(PDIALOG+0),A
	LD	A,OFF_PANTY
	ADD	A,L
	LD	(PDIALOG+2),A

	CALL	WAIT_COM
	LD	A,(PAG_NACT)
	LD	B,A
	LD	A,0EEh
	LD	HL,PDIALOG
	CALL	LIMPIA_PAN
	RET

PDIALOG:	DB	0,0,0,0,80,0,80,0,0EEh,0,0C0h





;NOMBRE: BWSTR
;OBJETIVO: CONVERTIR UN NUMERO BINARIO NATUAL A ASCII
;ENTRADA: HL ->  NUMERO BINARIO NATURAL
;         DE -> PUNTERO AL BUFFER DONDE SE ESCRIBE EL VALOR
;         C -> NUMERO DE DIGITOS A  IMPRIMIR  (0 < X < 5)
;         B -> 0 -> RELLENA CON ' '. SI NO NO RELLENA
;SALIDA:  (DE) -> RESULTADO DE LA CONVERSION


BNSTR:	LD	A,B
	LD	(BS_BLANK),A
	LD	A,C
	EXX
	LD	C,A
	SLA	C
	DEC	C
	LD	B,0
	LD	HL,POT10
	ADD	HL,BC

	LD	B,A
	XOR	A
	LD	(BS_FLAG),A

BSLOOP	LD	D,(HL)
	DEC	HL
	LD	E,(HL)
	DEC	HL
	PUSH	DE
	EXX
	POP	BC


	LD	A,-1
BSDIV	INC	A
	OR	A
	SBC	HL,BC
	JR	NC,BSDIV
	ADD	HL,BC
	OR	A
	JR	NZ,BWSTR1

	EX	AF,AF'
	LD	A,(BS_FLAG)
	OR	A
	JR	NZ,BWSTR0

	LD	A,(BS_BLANK)
	OR	A
	JR	NZ,BNSTR3
	LD	A,20h
	JR	BWSTR2

BWSTR0:	EX	AF,AF'
BWSTR1:	
	ADD	A,30h
	EX	AF,AF'
	LD	A,1
	LD	(BS_FLAG),A
	EX	AF,AF'


BWSTR2:	
	LD	(DE),A
	INC	DE
BNSTR3:	
	EXX
	DJNZ	BSLOOP

	EXX
	LD	A,0
	LD	(DE),A
	RET

BS_FLAG:	DB	0
POT10:	DW	1,10,100,1000,10000
BS_BLANK:	DB	0





;NOMBRE: CLOSE_WIN
;OBJETIVO: BAJAR LA VENTANA

CLOSE_WIN:	LD	A,(SINCRO)
	OR	A
	JR	NZ,CLOSE_WIN


SHOW_PJ2	LD	BC,3C3Ch
	LD	A,OFF_PANTY+(NUMPATY*8)-1
	LD	(UP_CORT_INI1),A
	LD	A,OFF_PANTY
	LD	(UP_CORT_INI2),A


	LD	A,5
	LD	(UP_CORT_ALT1),A
	INC	A
	LD	(UP_CORT_ALT2),A
	CALL	UP_CORTINA
	RET












;NOMBRE: PRINTF
;OBJETIVO: IMPRIMIR UNA CADENA FORMATEADA
;ENTRADA:         HL -> 1- CADENA DE CONTROL
;                 DE -> COORDENADAS
;                 SP+2 -> BUFFER  DE LOS PARAMETROS OCUPAN DOS BYTES.

;
;FORMATO: %dn IMPRIME UN ENTERO DE 16 BITS CON N DIGITOS DE PRECISION
;         %s  IMPRIME UNA CADENA
;         %n  SALTO DE LINEA
;         %4  PONE FUENTES DE 4x10
;         %8  PONE FUENTES DE 8x10
;         %b  PONE NEGRITA
;         %l  PONE NORMAL
;         0   FIN DE CADENA




PRINTF:	
	LD	(PRINTFPG),A
	LD	(CURSORY),DE
	LD	A,D
	LD	(CURSORXI),A
	EXX
	LD	HL,0
	ADD	HL,SP
	PUSH	HL
	EXX
	POP	DE
	INC	DE
	INC	DE

PRINTFB:	LD	A,(HL)
	INC	HL
	CP	'%'	;INDICADR DE FORMATO"
	JR	Z,PRINTFF

	CP	0	;FIN DE CADENA
	RET	Z

	PUSH	HL
	PUSH	DE
	LD	(PRINTFC),A
	LD	A,(PRINTFPG)
	LD	B,A
	LD	DE,(CURSORY)
	LD	HL,PRINTFC
	CALL	PRINT_TEXT

	LD	A,(CURSORX)
	LD	E,A
	LD	A,(PRINT_TSP)
	ADD	A,E
	LD	(CURSORX),A

	POP	DE
	POP	HL
	JR	PRINTFB



PRINTFF	LD	A,(HL)
	INC	HL
	CP	'd'
	JR	NZ,PRINTFF1	;ES UN NUMERO CON

	EX	AF,AF'
	LD	A,(HL)	;'C' DIGITOS
	SUB	30h	;LO PASAMOS A BINARIO
	LD	C,A
	EX	AF,AF'
	INC	HL
	LD	A,(HL)
	LD	B,0
	CP	'b'
	JR	NZ,PRINTFFG
	LD	B,1
	INC	HL

PRINTFFG	PUSH	HL
	LD	A,(DE)
	LD	L,A
	INC	DE
	LD	A,(DE)
	INC	DE
	LD	H,A
	PUSH	DE
	PUSH	BC
	LD	DE,PRINTFSA
	CALL	BNSTR

	LD	A,(PRINTFPG)
	LD	B,A
	LD	DE,(CURSORY)
	LD	HL,PRINTFSA
	CALL	PRINT_TEXT

	POP	DE
	LD	HL,(PRINT_TSP)
	LD	D,0
	LD	H,D
	CALL	MULTHLDE
	LD	A,(CURSORX)
	ADD	A,L
	LD	(CURSORX),A

	POP	DE
	POP	HL
	JR	PRINTFB


PRINTFF1:	CP	's'	;UNA CADENA
	JR	NZ,PRINTFF2
	PUSH	HL
	LD	A,(DE)
	LD	L,A
	INC	DE
	LD	A,(DE)
	LD	H,A
	INC	DE
	PUSH	DE


	PUSH	HL
	LD	A,(PRINTFPG)
	LD	B,A
	LD	DE,(CURSORY)
	CALL	PRINT_TEXT
	POP	HL	;AHORA HAY QUE CALCULAR EL TAMGNO  DE (HL)

	CALL	STRLEN
	LD	E,A
	LD	D,0
	LD	HL,9
	CALL	MULTHLDE
	LD	A,(CURSORX)
	ADD	A,L
	LD	(CURSORX),A

	POP	DE
	POP	HL
	JP	PRINTFB


PRINTFF2:	CP	'4'
	JR	NZ,PRINTFF3
	LD	A,1
	CALL	CHG_FONTS
	JP	PRINTFB

PRINTFF3:	CP	'8'
	JR	NZ,PRINTFF4
	XOR	A
	CALL	CHG_FONTS
	JP	PRINTFB

PRINTFF4	CP	'l'
	JR	NZ,PRINTFF5
	LD	A,98h
	LD	(PRINT_TTYPE),A
	JP	PRINTFB

PRINTFF5	CP	'b'
	JR	NZ,PRINTFF6
	LD	A,9Bh
	LD	(PRINT_TTYPE),A
	JP	PRINTFB



PRINTFF6:	LD	A,(CURSORY)	;SALTO DE LINEA
PRINT_TSY	ADD	A,10
	LD	(CURSORY),A
	LD	A,(CURSORXI)
	LD	(CURSORX),A
	JP	PRINTFB

PRINTFPG:	DB	0
PRINTFSA:	DS	6
PRINTFC:	DB	0,0
CURSORY:	DB	0
CURSORX:	DB	0
CURSORXI:	DB	0



;NOMBRE: STRLEN
;OBJETIVO: CONTAR LOS ELEMENTOS DE UNA  CADENA
;ENTRADA: HL -> PUNTERO A LA CADENA
;SALIDA: A -> TAMAGNO DE LA CADENA



STRLEN:	LD	B,0
STRLEN1:	LD	A,(HL)
	CP	0
	JR	Z,STRLEN2
	INC	B
	INC	HL
	JR	STRLEN1

STRLEN2:	LD	A,B
	RET






; AQUI ES NECESARIO SINCROONIZAR!!!!!!!!!!!!!
;NOMBRE: OPEN_WIN
;OBJETIVO: SUBIR LA VENTANA A LA VEZ QUE SE ENCARGA DE COPIAR EL CONTENIDO DE LA PAGINA NO VISIBLE

OPEN_WIN:	LD	A,(SINCRO)
	OR	A
	JR	NZ,OPEN_WIN

	LD	A,5	;INICIAMOS EL TAMAGNO DE LA PERSIANA
	LD	(UP_CORT_ALT1),A
	LD	(UP_CORT_ALT2),A
	LD	A,74
	LD	(UP_CORT_INI1),A	;Y EL INICIO
	LD	A,79
	LD	(SHOWP_D1+2),A
	LD	(SHOWP_D1+6),A
	LD	A,85
	LD	(UP_CORT_INI2),A
	LD	A,80
	LD	(SHOWP_D2+2),A
	LD	(SHOWP_D2+6),A

	LD	A,(PAG_NACT)	;ADEMAS DE LAS PAGINAS ORIGENN Y DESTINO
	LD	(SHOWP_D1+3),A
	LD	(SHOWP_D2+3),A
	LD	A,(PAG_ACT)
	LD	(SHOWP_D1+7),A
	LD	(SHOWP_D2+7),A

	LD	B,3Ch
SHOW_PJ4	PUSH	BC
	LD	BC,0101h
	CALL	UP_CORTINA

	CALL	WAIT_COM
	LD	HL,SHOWP_D1	;EL COPY  DE  LA QUE BAJA
	CALL	COPYVRAM

	CALL	WAIT_COM
	LD	HL,SHOWP_D2	;EL COPY  DE LA QUE SUBE
	CALL	COPYVRAM

	LD	HL,SHOWP_D1+2	;PASAMOS A ACTUALIZAR LOS PUNTEROS
	DEC	(HL)
	LD	HL,SHOWP_D1+6
	DEC	(HL)

	LD	HL,SHOWP_D2+2	;TANTO  DE LOS COPYS COMMO DE LA  CORTINA
	INC	(HL)
	LD	HL,SHOWP_D2+6
	INC	(HL)

	LD	HL,UP_CORT_INI1
	DEC	(HL)	;LA QUE SUBE
	LD	HL,UP_CORT_INI2
	INC	(HL)	;LA QUE  BAJA
	POP	BC
	DJNZ	SHOW_PJ4
	RET





SHOWP_D1:	DB	OFF_PANTX,0,0,0, OFF_PANTX,0,0,0, NUMPATX*8,0,1,0,0,0,0D0h
SHOWP_D2:	DB	OFF_PANTX,0,0,0, OFF_PANTX,0,0,0, NUMPATX*8,0,1,0,0,0,0D0h












;NOMBRE: WRITE_PNA_C
;OBJETIVO: ESCRIBIR EN LA PAGINA OCULTA HACIENDO UN COPY PARA ELLO


WRITE_PNA_C:	LD	HL,CRUZ_Y
	CALL	MOVE_XX
	LD	A,(CRUZ_X)
	LD	(GEST_DATAP+4),A
	LD	(GEST_DATAS),A

	LD	A,(CRUZ_Y)
	LD	(GEST_DATAP+6),A
	LD	(GEST_DATAS+2),A
	LD	A,(PAG_NACT)
	LD	(GEST_DATAP+7),A
	LD	(GEST_DATAS+3),A

	LD	A,PAG_OBJETOS
	LD	(GEST_DATAS+7),A


	LD	HL,(FONDO_NACT)
	LD	A,L
	LD	(GEST_DATAS+4),A
	LD	A,H
	LD	(GEST_DATAS+6),A


	LD	HL,GEST_DATAS
	CALL	WAIT_COM
	CALL	COPYVRAM
	LD	HL,GEST_DATAP
	CALL	WAIT_COM
	CALL	COPYVRAM
	RET


;NOMBRE: ERASE_PNA_C
;OBJETIVO: BORRAR LOS PERSONAJES QUE SE ENCUENTRAN EN LA PAGINA OCULTA

ERASE_PNA_C	LD	A,(SINCRO)
	OR	A
	JR	NZ,ERASE_PNA_C


	LD	A,(FONDO_NACT+1)
	LD	(GEST_DATAR+2),A
	LD	A,(FONDO_NACT)
	LD	(GEST_DATAR+0),A

	LD	A,(COOR_Y_NA)
	LD	(GEST_DATAR+6),A
	LD	A,(COOR_Y_NA+1)
	LD	(GEST_DATAR+4),A
	LD	A,(PAG_NACT)
	LD	(GEST_DATAR+7),A
	LD	HL,GEST_DATAR
	CALL	WAIT_COM
	CALL	COPYVRAM
	LD	HL,(CRUZ_Y)
	LD	(COOR_Y_NA),HL
	RET







GEST_DATAS:	DB	0,0,0,0, 0,0,0,PAG_OBJETOS,18,0,34,0,0,0,0D0h
GEST_DATAP:	DB	0,0,0,PAG_OBJETOS,0,0,0,0,16,0,16,0,0,0,98h
GEST_DATAR:	DB	0,0,0,PAG_OBJETOS,0,0,0,0,18,0,16,0,0,0,0D0h





COOR_Y_NA:	DB	0
	DB	0




;NOMBRE: SWAP_PAGE_C
;OBJETIVO: ESTA FUNCION SE ENCARGA DE CAMBIAR PAGINAS EN EL MODO SIMPLE


SWAP_PAGE_C:	LD	A,(PAG_ACT)
	LD	B,A
	LD	A,(PAG_NACT)
	LD	(PAG_ACT),A
	LD	A,B
	LD	(PAG_NACT),A

	LD	HL,(FONDO_ACT)
	LD	DE,(FONDO_NACT)
	LD	(FONDO_ACT),DE
	LD	(FONDO_NACT),HL
	DI
	LD	A,1
	LD	(SINCRO),A
	DEC	A
	LD	(TIME_),A
	EI
	RET


FONDO_ACT:	DB	222,150
FONDO_NACT:	DB	222,184
INV_ACT:	DW	0
EQUIPO_ACT:	DW	0
CRUZ_Y:	DB	0
CRUZ_X:	DB	0


;NOMBRE:  CHECK_CINV
;OBJETIVO: CHEQUEAR SI SE HA PULSADO SOBRE UNA CASILLA
;ENTRADA:  H -> COORDENADA X
;          L -> COORDENADA Y
;SALIDA: A -> NUMERO DE CASILLA PULSADA (1-22)
;        DE -> EN CASO DE QUE A SEA != 0 APUNTA A LAS COORDENADAS DE LA CASILLA


CHECK_CINV:	LD	DE,SHOWINVB

	LD	B,23
	LD	C,0
CHECK_CIB	LD	A,(DE)
	INC	DE
	SUB	H
	JP	P,CHECK_CIX
	NEG


CHECK_CIX	CP	16
	EX	AF,AF'
	LD	A,(DE)
	INC	DE
	EX	AF,AF'
	JR	NC,CHECK_CIFB

	EX	AF,AF'
	SUB	L
	JP	P,CHECK_CIY
	NEG

CHECK_CIY	CP	16
	JR	NC,CHECK_CIFB
	LD	A,C
	DEC	DE
	DEC	DE
	RET


CHECK_CIFB	INC	C
	DJNZ	CHECK_CIB
	XOR	A
	RET



;NOMBRE: MOVE_XX
;OBJETIVO: FUNCION ALTERNATIVA PARA MOVIMIENTO PIXEL A PIXEL.
;ENTRADA: HL-> PUNTERO A LAS COORDENADAS


MOVE_XX:	
	CALL	GET_DIR
	LD	A,(DIR_ACTUAL)
	CP	80h
	RET	Z
	LD	DE,(CRUZ_Y)

;               LD      A,(HL)
;               INC     HL
;               LD      H,(HL)
;               LD      L,A

	CP	ARRIBA
	JR	NZ,MOVE_XSPAB
	DEC	E
	DEC	E
	JR	MOVE_XSPR

MOVE_XSPAB	CP	ABAJO
	JR	NZ,MOVE_XSPDE
	INC	E
	INC	E
	JR	MOVE_XSPR

MOVE_XSPDE	CP	DERECHA
	JR	NZ,MOVE_XSPIZ
	INC	D
	INC	D
	JR	MOVE_XSPR

MOVE_XSPIZ	CP	IZQUIERDA
	JR	NZ,MOVE_XSPDAB
	DEC	D
	DEC	D
	JR	MOVE_XSPR

MOVE_XSPDAB	CP	ABA_DER
	JR	NZ,MOVE_XSPIAB
	INC	E
	INC	D
	INC	E
	INC	D
	JR	MOVE_XSPR

MOVE_XSPIAB	CP	ABA_IZQ
	JR	NZ,MOVE_XSPDAR
	INC	E
	DEC	D
	INC	E
	DEC	D
	JR	MOVE_XSPR

MOVE_XSPDAR	CP	ARR_DER
	JR	NZ,MOVE_XSPIAR
	DEC	E
	INC	D
	DEC	E
	INC	D
	JR	MOVE_XSPR

MOVE_XSPIAR	CP	ARR_IZQ
	RET	NZ
	DEC	E
	DEC	D
	DEC	E
	DEC	D

MOVE_XSPR	JR	XMOVE4

	LD	A,D
	CP	OFF_PANTY+((NUMPATY-2)*8)-1
	JR	NZ,XMOVE1	;AQUI HABRIA QUE LLAMAR A LA RUTINA DE
	LD	D,H	;DE SCROLL
	JR	XMOVE2

XMOVE1	LD	A,D
	CP	OFF_PANTY+1
	JR	NZ,XMOVE2
	LD	D,H


XMOVE2	LD	A,E
	CP	OFF_PANTX+((NUMPATX-2)*8)-1
	JR	NZ,XMOVE3
	LD	E,L
	JR	XMOVE4


XMOVE3	LD	A,E
	CP	OFF_PANTX+1
	JR	NZ,XMOVE4
	LD	E,L


XMOVE4	LD	(CRUZ_Y),DE
	RET










;NOMBRE: MAKE_PJ
;OBJETIVO: MOSTRAR EL MENU DE SELECCION DEL PERSONAJE Y GESTIONAR LAS
;ENTRADA: C -> NUMERO DE PERSONAJE


MAKE_PJ:	LD	A,C
	LD	(MAKE_PJPER),A
	CALL	SHOW_OPC

MAKE_PJ_W	CALL	SEL_OPC_PJ

	PUSH	AF
	CALL	HIDE_CUAD
	CALL	HIDE_OPC
	POP	AF

	OR	A	;SELECCION DE ANDAR
	JR	NZ,MAKE_PJ_AT
	CALL	DO_WAY_PER
	RET


MAKE_PJ_AT	
	CP	1	;SELECCION DE ATACAR
	JR	NZ,MAKE_PJ_MA
	RET


MAKE_PJ_MA	
	CP	2	;SELECCION DE MAGIA
	JR	NZ,MAKE_PJ_END
	RET



MAKE_PJ_END	JP	SALIR	;SELECCION DE ACABAR


	RET

MAKE_PJPER:	DB	0
MAKE_PJOPC:	DB	0



;NOMBRE: SEL_OPC_PJ
;OBJETIVO: GESTIONAR LA SELECCION DE OPCION POR PARTE DEL PJ



SEL_OPC_PJ:	LD	A,(SEL_OPC_CONT)
	LD	D,0
	LD	E,A
	LD	HL,SEL_OPC_TB
	ADD	HL,DE
	LD	A,(HL)

	LD	B,4
	LD	C,SPRITE_CUAD-1
SEL_OPC_PJ1	INC	C
	PUSH	AF
	PUSH	BC
	LD	B,1
	LD	D,A
	LD	E,129
	CALL	GOTO_SPXY
	POP	BC
	POP	AF
	ADD	A,16
	DJNZ	SEL_OPC_PJ1

	CALL	ASK_OUT
	CALL	GET_DIR

	LD	A,(SEL_OPC_CONT)
	LD	B,A
	LD	A,(DIR_ACTUAL)

	CP	DERECHA
	JR	NZ,SEL_OPC_PJ_IZ
	INC	B

SEL_OPC_PJ_IZ	CP	IZQUIERDA
	JR	NZ,SEL_OPC_PJ_A
	DEC	B

SEL_OPC_PJ_A	LD	A,B
	AND	3
	LD	(SEL_OPC_CONT),A

	LD	A,10
	DI
	LD	(TIME_),A
	EI
SEL_OPC_PJ_W	LD	A,(TIME_)
	OR	A
	JR	NZ,SEL_OPC_PJ_W


	LD	A,SPC_KEY
	CALL	TEST_FUNC
	OR	A
	LD	A,(SEL_OPC_CONT)
	RET	NZ
	JR	SEL_OPC_PJ



SEL_OPC_CONT:	DB	0


SEL_OPC_TB:	DB	12
		DB	68
		DB	124
		DB	180

SEL_OPC_M:	DB	0


;NOMBRE: SHOW_OPC
;OBJETIVO: MOSTRAR LA BARRA DE OPCIONES DEL MODO DE EXTERIORES, ADEMAS
;          DE GESTIONAR EL MOVIMIENTO DEL CUADRO QUE SIRVE PARA SELECCIONAR
;          LAS OPCIONES



HIDE_OPC:	LD	A,(SINCRO)
	OR	A
	JR	NZ,HIDE_OPC

	LD	A,OFF_PANTY+(NUMPATY*8)-ALTO_OPT
	LD	(SHOW_OPCD+6),A

	LD	A,OFF_PANTX
	LD	(SHOW_OPCD+0),A

	LD	A,(PAG_NACT)
	LD	(SHOW_OPCD+3),A

	LD	A,OFF_PANTY+(NUMPATY*8)-ALTO_OPT
	LD	(SHOW_OPCD+2),A

	LD	A,OFF_PANTY+(NUMPATY*8)+5
	LD	(UP_CORT_INI2),A

	LD	BC,1
	LD	(DO_OPC_PJ_BC),BC


	LD	C,6+ALTO_OPT
	LD	HL,UP_CORT_ALT2
	LD	(HL),C
	LD	B,ALTO_OPT
	LD	C,-1
	LD	HL,SHOW_OPCD+6
	JR	SHOW_OPC01


SHOW_OPC:	LD	A,(SINCRO)
	OR	A
	JR	NZ,SHOW_OPC

	LD	A,OFF_PANTY+(NUMPATY*8)+5
	LD	(SHOW_OPCD+6),A

	XOR	A
	LD	(SHOW_OPCD+0),A

	LD	A,PAG_OPTIONS
	LD	(SHOW_OPCD+3),A

	LD	A,COORDY_OPT
	LD	(SHOW_OPCD+2),A

	LD	A,OFF_PANTY+(NUMPATY*8)-1
	LD	(UP_CORT_INI1),A

	LD	BC,0100h
	LD	(DO_OPC_PJ_BC),BC

	LD	A,4
	LD	B,3
	LD	(WRITE_CONT),A
SHOW_OPC0	PUSH	BC
	CALL	DO_VISUAL
	POP	BC
	DJNZ	SHOW_OPC0


	LD	C,6
	LD	HL,UP_CORT_ALT1
	LD	(HL),C
	LD	C,1
	LD	B,ALTO_OPT
	LD	HL,DO_OPC_DUMMY


SHOW_OPC01	LD	A,(PAG_ACT)
	LD	(SHOW_OPCD+7),A

SHOW_OPC1	PUSH	HL
	PUSH	BC
	LD	HL,UP_CORT_ALT1
	INC	(HL)
	LD	HL,UP_CORT_ALT2
	DEC	(HL)

	LD	BC,(DO_OPC_PJ_BC)
	CALL	UP_CORTINA

	LD	HL,SHOW_OPCD
	CALL	WAIT_COM
	CALL	COPYVRAM


	POP	BC
	LD	HL,SHOW_OPCD+2
	INC	(HL)

	LD	HL,UP_CORT_INI1
	DEC	(HL)

	POP	HL
	INC	(HL)

	DJNZ	SHOW_OPC1
	RET

DO_OPC_PJ_BC:	DW	0
DO_OPC_DUMMY:	DB	0

SHOW_OPCD:	DB	0,0,COORDY_OPT,PAG_OPTIONS
		DB	OFF_PANTX,0,0,0
		DB	256-(2*OFF_PANTX),0,1,0,0,0,0D0h



;NOMBRE: INIT_CUAD
;OBJETIVO: INICIALIZAR EL CUADRADO DE SELECCION



INIT_CUAD:	LD	HL,CUADSP1
	LD	DE,CUADSPC1
	LD	A,SPRITE_CUAD
	LD	C,PATTERN_CUAD
	LD	B,2
	CALL	INITP16x16

	LD	HL,CUADSP2
	LD	DE,CUADSPC1
	LD	A,SPRITE_CUAD+2
	LD	C,PATTERN_CUAD+8
	LD	B,2
	CALL	INITP16x16
	RET


;NOMBRE: HIDE_CUAD
;OBJETIVO: INICIALIZAR EL CUADRADO DE SELECCION


HIDE_CUAD:	LD	C,SPRITE_CUAD
	LD	B,4
	LD	D,255
	LD	E,255
	CALL	GOTO_SPXY
	RET



;NOMBRE: UP_CORTINA
;OBJETIVO: SUBIR LA PERSIANA DE ABAJO LO QUE SE INDIQUE EN LA PAGINA ACTUAL
;ENTRADA: B -> NUMERO DE LINEAS QUE SUBE LA CORTINA DE ABAJO
;         C -> NUMERO DE LINEAS QUE BAJA LA CORTINA DE ARRIBA
;         UP_CORT_INI1 -> Y DE ORIGEN DE LA CORTINA DE ABAJO
;         UP_CORT_INI2 -> Y DE ORIGEN DE LA CORTINA DE ARRIBA
;         UP_CORT_ALT1 -> ALTURA DE LA CORTINA DE ABAJO
;         UP_CORT_ALT2 -> ALTURA DE LA CORTINA DE ARRIBA
;ES POSIBLE QUE SE PUEDA USAR INCLUSO PARA LO CONTRARIO, TAN SOLO HABRIA
;QUE MODIFICAR LOS VALORES INICIALES. PARA CERRAR LA PERSIANA ENTERA HAY QUE
;PASARLE $3C3C


UP_CORTINA:	LD	A,(SINCRO)
	OR	A
	JR	NZ,UP_CORTINA

	PUSH	BC
	CALL	SPD_OFF
	POP	BC

	LD	A,(UP_CORT_INI1)
	LD	(UP_CORTINAD1+2),A
	LD	A,(PAG_ACT)
	LD	(UP_CORTINAD1+7),A
	LD	(UP_CORTINAD2+7),A
	LD	(UP_CORTINAD1+3),A
	LD	(UP_CORTINAD2+3),A


	LD	A,(UP_CORT_INI2)
	LD	(UP_CORTINAD2+2),A


UP_CORTINA1	LD	A,B
	OR	A
	JR	Z,UP_CORTINA2

	LD	A,(UP_CORTINAD1+2)
	LD	(UP_CORTINAI1),A
	PUSH	BC


	LD	A,(UP_CORT_ALT1)
	LD	B,A
UP_CORTINA_AB	PUSH	BC

	LD	A,(UP_CORTINAD1+2)
	LD	(UP_CORTINAD1+6),A
	INC	A
	LD	(UP_CORTINAD1+2),A

	LD	HL,UP_CORTINAD1
	CALL	WAIT_COM
	CALL	COPYVRAM


	POP	BC
	DJNZ	UP_CORTINA_AB

	LD	A,(UP_CORTINAI1)
	DEC	A
	LD	(UP_CORTINAD1+2),A
	DEC	A
	LD	(UP_CORTINAD1+6),A

	POP	BC
	DEC	B


UP_CORTINA2	LD	A,C
	OR	A
	JR	Z,UP_CORTINA_E

	LD	A,(UP_CORTINAD2+2)
	LD	(UP_CORTINAI2),A
	PUSH	BC

	LD	A,(UP_CORT_ALT2)
	LD	B,A
UP_CORTINA_UP	PUSH	BC

	LD	A,(UP_CORTINAD2+2)
	LD	(UP_CORTINAD2+6),A
	DEC	A
	LD	(UP_CORTINAD2+2),A

	LD	HL,UP_CORTINAD2
	CALL	WAIT_COM
	CALL	COPYVRAM


	POP	BC
	DJNZ	UP_CORTINA_UP

	LD	A,(UP_CORTINAI2)
	INC	A
	LD	(UP_CORTINAD2+2),A
	INC	A
	LD	(UP_CORTINAD2+6),A

	POP	BC
	DEC	C
	JR	UP_CORTINA1

UP_CORTINA_E	LD	A,B
	OR	A
	RET	Z
	JR	UP_CORTINA1



UP_CORT_ALT1:	DB	6
UP_CORT_ALT2:	DB	6
UP_CORT_INI1:	DB	OFF_PANTY+(NUMPATY*8)-1
UP_CORT_INI2:	DB	OFF_PANTY
UP_CORTINAI1:	DB	0
UP_CORTINAI2:	DB	0



UP_CORTINAD1:	DB	OFF_PANTX,0,0,0
	DB	OFF_PANTX,0,0,0
	DB	256-(2*OFF_PANTX),0,1,0,0,0,0D0h


UP_CORTINAD2:	DB	OFF_PANTX,0,0,0
	DB	OFF_PANTX,0,0,0
	DB	256-(2*OFF_PANTX),0,1,0,0,0,0D0h







;NOMBRE: MOVE_EXT
;OBJETIVO: DESPLAZAR LA X POR LA PANTALLA DE BLOQUE DE 32x16
;ENTRADA: A  -> 0 SI ES UN PERSONAJE NORMAL.
;               1 SI ES LA CRUZ.
;         C -> NUMERO DE PERSONAJE
;         B -> SI DIRIGUE EL SCROLL SERA 0
;ESTA FUNCION HAY QUE MODIFICARLA PARA PERMITIR MOVER PERSONAJES NORMALES.


MOVE_EXT:	LD	HL,(PTR_PERSO)
	LD	(MOVE_XSP),A
	OR	A
	JR	Z,MOVE_X1
	LD	HL,PUT_XPERA
	LD	C,0

MOVE_X1	LD	(PER_MOV_X),HL
	LD	(MOVE_XBC),BC

	CALL	GET_DIR


	LD	HL,DIR_ACTUAL
	LD	B,(HL)
	LD	A,80h
	LD	(HL),A
	LD	A,B

MOVE_X8	LD	HL,MOVE_XBUFF
	LD	B,4
	CP	ARRIBA
	JR	Z,MOVE_X2
	CP	ABAJO
	JR	NZ,MOVE_X3
MOVE_X2	LD	B,2

MOVE_X3	LD	(HL),A
	INC	HL
	DJNZ	MOVE_X3
	LD	B,0FFh
	LD	(HL),B

	LD	A,GET_DIR_BUFF
	LD	DE,MOVE_XNEWH
	LD	HL,MOVE_XBUFF
	CALL	ADD_EXCP


MOVE_X4	LD	HL,(PTR_PERSO)
	LD	(MOVE_XPER),HL
	LD	HL,(PER_MOV_X)
	LD	(PTR_PERSO),HL
	LD	(INDEXPERSO),HL


	LD	BC,(MOVE_XBC)
	LD	A,(DIR_ACTUAL)
	LD	E,A
	LD	A,C
	CALL	MOVPERSO
	CALL	ASK_OUT


MOVE_X7	LD	A,(MOVE_XSP)
	OR	A
	JR	NZ,MOVE_X6

	LD	A,4
	LD	(WRITE_CONT),A

MOVE_X6	LD	HL,(MOVE_XPER)
	LD	(PTR_PERSO),HL
	LD	(INDEXPERSO),HL

	CALL	SWAP_PAGE
	CALL	ERASE_PNA
	CALL	VIEW_PERSO

	LD	A,(MOVE_XSP)
	OR	A
	JR	Z,MOVE_X9
	LD	IX,(PER_MOV_X)
	CALL	MOVPVIS

MOVE_X9	CALL	MAPRUT
	CALL	WRITE_PNA

	LD	A,(MOVE_XSP)
	OR	A
	JR	Z,MOVE_X5
	LD	A,(PUT_XFIGA+STRFIG_XACT)
	LD	D,A
	LD	A,(PUT_XFIGA+STRFIG_YACT)
	LD	E,A
	LD	C,SPRITE_CRUZ
	LD	B,2
	CALL	GOTO_SPXYG

MOVE_X5	LD	A,(DIR_ACTUAL)
	CP	81h
	JP	NZ,MOVE_X4

	CALL	UP_EXCP
	RET



MOVE_XPER:	DW	0
MOVE_XSP:	DB	0
PER_MOV_X:	DW	0
MOVE_XBC:	DW	0
MOVE_XBUFF:	DS	7



MOVE_XNEWH:	CALL	UP_EXCP
	CALL	GET_DIR

	LD	A,(DIR_ACTUAL)
	CP	0FFh
	JR	NZ,MOVE_XH1

	LD	IX,(PTR_EXCP)
	LD	L,(IX+STREXCP_HAND)
	LD	H,(IX+STREXCP_HAND+1)
	LD	(MOVE_XH0+1),HL
MOVE_XH0	CALL	0
	JR	MOVE_XH5

MOVE_XH1:	CP	80h
	JR	NZ,MOVE_XH2
	LD	A,081h
	LD	(DIR_ACTUAL),A
	JR	MOVE_XH5

MOVE_XH2	LD	HL,MOVE_XBUFF
	LD	B,4
	CP	ARRIBA
	JR	Z,MOVE_XH3
	CP	ABAJO
	JR	NZ,MOVE_XH4
MOVE_XH3	LD	B,2

MOVE_XH4	LD	(HL),A
	INC	HL
	DJNZ	MOVE_XH4
	LD	B,0FFh
	LD	(HL),B

	LD	(DIR_ACTUAL),A

	LD	A,1	;TENGO QUE MODIFICAR MI ENTORNO PERO AHORA
	LD	(IX+STREXCP_PTR+STRUCTEXCEP),A	;MISMO ESTA PUESTO EL SUPERIOR
;                                                      ;Y LO CAMBIO ABAJO
MOVE_XH5	CALL	DW_EXCP
	RET



;NOMBRE: PUT_X
;OBJETIVO: COLOCAR LA X  ENCIMA DEL PERSONAJE NUMERO 0

PUT_X:	LD	HL,(PUT_X_PERSO)
	LD	DE,PUT_XPERA
	LD	BC,STRUCTPERSO
	LDIR

	LD	IX,PUT_XPERA
	LD	HL,PUT_XFIGA
	LD	(IX+STRPER_FIG),L
	LD	(IX+STRPER_FIG+1),H

	LD	L,(IX+STRPER_X)
	LD	H,(IX+STRPER_X+1)
	LD	E,(IX+STRPER_Y)
	LD	D,(IX+STRPER_Y+1)
	LD	B,0
	LD	A,MAXNUMPJS+1
	LD	C,CEN_TOTAL

	PUSH	IX
	PUSH	IX
	CALL	SET_XY
	POP	IX
	CALL	MOVPVIS
	POP	IX
	LD	E,(IX+STRPER_FIG)
	LD	D,(IX+STRPER_FIG+1)
	PUSH	DE
	POP	IX

	LD	C,SPRITE_CRUZ
	LD	B,2

	LD	D,(IX+STRFIG_XACT)
	LD	E,(IX+STRFIG_YACT)
	CALL	GOTO_SPXYG
	CALL	SPD_ON
	RET

PUT_X_PERSO:	DW	0
PUT_XPERA:	DS	STRUCTPERSO
PUT_XFIGA:	DS	STRUCTFIGURA




;NOMBRE: DO_VISUAL
;OBJETIVO: REALIZAR TODAS LAS GESTIONES GRAFICAS DEL JUEGO (EN LOS MODOS DE
;          INTERIOR Y DE EXTERIOR)

DO_VISUAL:	CALL	ERASE_PNA
	CALL	VIEW_PERSO
	CALL	MAPRUT
	CALL	WRITE_PNA
	CALL	SWAP_PAGE
	CALL	ASK_OUT
	RET


WAITKB:	CALL	ASK_OUT
	LD	A,7
	CALL	LEE_FILA_KB
	LD	B,A
	LD	A,(LLL)
	XOR	B
	BIT	6,A
	JR	Z,WAITKB
	LD	A,B
	LD	(LLL),A
	RET

LLL:	DB	0FFh











;NOMBRE: MAKEMAR
;OBJETIVO: DIBUJAR EL MARCADOR
;ESTA FUNCION ES TEMPORAL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


MAKEMARK:	
	LD	HL,MARC1
	LD	DE,BUFFER
	LD	IX,0
	LD	IY,0
	CALL	LPIMAGE

	LD	HL,MARC2
	LD	DE,BUFFER
	LD	IX,0
	LD	IY,65
	CALL	LPIMAGE

	LD	HL,MARC3
	LD	DE,BUFFER
	LD	IX,0
	LD	IY,141
	CALL	LPIMAGE

	CALL	WAIT_COM
	LD	HL,MAKEMARKD
	CALL	COPYVRAM
	RET

MAKEMARKD:	DB	0,0, 0,0 ,0,0, 0,1 ,0,1,212,0,0,0,0D0h






;NOMBRE: INIT_BUFPAG
;OBJETIVO: INICIALIZAR LOS BUFFER DE PATRONES DE AMBAS PAGINAS.
;MODIFICA:


INIT_BUFPAG:	LD	HL,BUFFER_PAG1
	LD	E,255
	LD	B,NUMPATY*2
INIT_BUFP1	PUSH	BC
	LD	B,NUMPATX
INIT_BUFP2	LD	(HL),E
	INC	HL
	DJNZ	INIT_BUFP2
	POP	BC
	DJNZ	INIT_BUFP1
	RET







;NOMBRE: INIT_FIGURASV
;OBJETIVO: INICIALIZAR LA OCUPACION DEL VECTOR DE FIGURAS A 0.
;MODIFICA: AF,IX,B,DE

INIT_FIGURASV:	XOR	A
	LD	B,MAXFIGURAS*STRUCTFIGURA
	LD	HL,STRFIG_VECTOR
INIT_FIG1	LD	(HL),A
	INC	HL
	DJNZ	INIT_FIG1
	RET







;NOMBRE: SWAP_PAGE
;OBJETIVO: REALIZAR EL INTERCAMBIO ENTRE PAGINA ACTIVA Y NO ACTIVA
;MODIFICA: AF,B,DE,HL

SWAP_PAGE:	CALL	WAIT_COM

	DI
	LD	A,(PAG_NACT)
	LD	B,A
	LD	A,(PAG_ACT)
	LD	(PAG_NACT),A
	LD	A,B
	LD	(PAG_ACT),A
	LD	A,(PERIODO)
	LD	(TIME_),A
	LD	A,1
	LD	(SINCRO),A
	EI

	LD	HL,(MAPEAPTR)
	LD	DE,(MAPEAPTRA)
	LD	(MAPEAPTRA),HL
	LD	(MAPEAPTR),DE

	XOR	A
	LD	(NUMPAT2PLN),A

	LD	A,(SWAP_CONT)
	OR	A
	JP	NZ,SWAP_PAGEF

	XOR	A
	LD	(SWAP_FLAG),A
	CALL	GET_DIR
	LD	A,(SCROLLSOL)
	LD	B,A
	XOR	A
	LD	(SCROLLSOL),A
	LD	(SCROLLST),A
	LD	A,(DIR_ACTUAL)

	BIT	0,B
	JR	Z,SWAP_DER
	CP	IZQUIERDA
	JR	Z,SWAP_IZX
	CP	ARR_IZQ
	JR	Z,SWAP_IZX
	CP	ABA_IZQ
	JR	NZ,SWAP_DER
SWAP_IZX	LD	A,IZQSCR
	LD	(SCROLLST),A
	LD	A,1
	LD	(SWAP_FLAG),A
	LD	A,(DIR_ACTUAL)


SWAP_DER:	BIT	1,B
	JR	Z,SWAP_ABA
	CP	DERECHA
	JR	Z,SWAP_DEX
	CP	ARR_DER
	JR	Z,SWAP_DEX
	CP	ABA_DER
	JR	NZ,SWAP_ABA
SWAP_DEX	LD	A,(SCROLLST)
	OR	DERSCR
	LD	(SCROLLST),A
	LD	A,1
	LD	(SWAP_FLAG),A
	LD	A,(DIR_ACTUAL)


SWAP_ABA:	BIT	2,B
	JR	Z,SWAP_ARA
	CP	ABAJO
	JR	Z,SWAP_ABX
	CP	ABA_DER
	JR	Z,SWAP_ABX
	CP	ABA_IZQ
	JR	NZ,SWAP_ARA
SWAP_ABX	LD	A,(SCROLLST)
	OR	ABASCR
	LD	(SCROLLST),A
	LD	A,1
	LD	(SWAP_FLAG),A
	LD	A,(DIR_ACTUAL)


SWAP_ARA:	BIT	3,B
	JR	Z,SWAP_PAGFL
	CP	ARRIBA
	JR	Z,SWAP_ARX
	CP	ARR_DER
	JR	Z,SWAP_ARX
	CP	ARR_IZQ
	JR	NZ,SWAP_PAGFL
SWAP_ARX	LD	A,(SCROLLST)
	OR	ARRSCR
	LD	(SCROLLST),A
	LD	A,1
	LD	(SWAP_FLAG),A


SWAP_PAGFL	LD	A,(SWAP_FLAG)
	OR	A
	JR	Z,SWAP_PAGENS

SWAP_PAGND:	LD	A,INC_MOVD
	LD	(INC_MOV),A
	LD	A,4
	LD	(WRITE_CONT),A
	LD	A,1
	LD	(SWAP_CONT),A
	LD	A,NUMREPFRAMED
	LD	(NUMREPFRAME),A
	LD	A,PERIODOD
	LD	(PERIODO),A
	LD	A,(DIR_ACTUAL)
	RLCA
	JR	NC,SWAP_PAGEF
	XOR	A
	LD	(SCROLLST),A


SWAP_PAGENS:	LD	A,INC_MOVS
	LD	B,PERIODOS
	LD	(INC_MOV),A
	LD	A,NUMREPFRAMES
	LD	(NUMREPFRAME),A
	LD	A,B
	LD	(PERIODO),A
	LD	A,2
	LD	(SWAP_CONT),A

SWAP_PAGEF:	LD	A,(SWAP_CONT)
	DEC	A
	LD	(SWAP_CONT),A

	RET


SWAP_CONT:	DB	0
SWAP_FLAG:	DB	0





;NOMBRE: PRINT_TEXT
;OBJETIVO: MOSTRAR UN MENSAJE DE TEXTO EN LA PAGINA ACTIVA. EL CODIGO DE ENTRADA
;ESTA EN ASCIIZ EXCEPTO VARIOS SIMBOLOS:
;LA ADMIRACION A -> }
;LA INTERROGACION A -> }
;LA GN -> \
;ENTRADA:      D  -> COORDENADA X
;              E  -> COORDENADA Y
;              HL -> PUNTERO AL MENSAJE ASCIIZ
;              B  -> PAGINA DONDE SE ESCRIBE

PRINT_TEXT:	LD	A,(SINCRO)
	OR	A
	JR	NZ,PRINT_TEXT

	LD	A,B
	LD	(PRINT_TDATA+7),A
	LD	A,D
	LD	(PRINT_TDATA+4),A
	LD	A,E
	LD	(PRINT_TDATA+6),A


PRINT_TEXT1	LD	A,(HL)
	INC	HL
	CP	0
	RET	Z
	PUSH	HL
	CP	' '
	JR	Z,PRINT_T1

	LD	L,A
	LD	H,0
	ADD	HL,HL
	LD	DE,(PRINT_TLOC)
	ADD	HL,DE
	LD	A,(HL)
	OR	A
	JR	Z,PRINT_T2	;SE HA ESCRITO UN CARACTER NO RECONOCIBLE

	LD	(PRINT_TDATA),A
	INC	HL
	LD	A,(HL)
	LD	(PRINT_TDATA+2),A

	CALL	WAIT_COM
	LD	HL,PRINT_TDATA
	CALL	COPYVRAM
PRINT_T1	LD	A,(PRINT_TDATA+4)
	LD	B,A
	LD	A,(PRINT_TSP)
	ADD	A,B
	LD	(PRINT_TDATA+4),A
PRINT_T2	POP	HL
	JR	PRINT_TEXT1



PRINT_TDATA:	DB	0,0,0,PAG_FONTS
	DB	0,0,0,0
PRINT_TSIZE:	DB	4,0,8,0,0,0
PRINT_TTYPE	DB	98h

PRINT_TSP:	DB	4	;
PRINT_TLOC:	DW	PRINT_TLOC2	;


PRINT_TLOC1:	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,160,48,0,0,0,0,0,0,0,0,0,0,160,52
	DB	0,0,0,0,0,0,0,0,168,52,0,0,144,56,152,56,160,32,168,32
	DB	176,32,184,32,144,40,152,40,160,40,168,40,176,40,184,40,144,48,0,0
	DB	0,0,0,0,0,0,152,48,0,0,144,0,152,0,160,0,168,0,176,0
	DB	184,0,144,8,152,8,160,8,168,8,176,8,184,8,144,16,152,16,160,16
	DB	168,16,176,16,184,16,144,24,152,24,160,24,168,24,176,24,184,24,144,32
	DB	152,32,0,0,184,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,168,48,0,0,176,48,0,0,0,0


PRINT_TLOC2:	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,192,0,200,0,204,0,208,0,212,0,216,0,220,0
	DB	192,8,196,8,200,8,204,8,208,8,212,8,216,8,220,8
	DB	192,16,196,16,200,16,204,16,208,16,212,16,216,16,220,16
	DB	192,24,196,24,200,24,204,24,208,24,212,24,216,24,220,24
	DB	192,32,196,32,200,32,204,32,208,32,212,32,216,32,220,32
	DB	192,40,196,40,200,40,204,40,208,40,212,40,216,40,220,40
	DB	192,48,196,48,200,48,204,48,208,48,212,48,216,48,220,48
	DB	192,56,196,56,200,56,204,56,208,56,212,56,216,56,220,56
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


;NOMBRE: CHG_FONTS
;OBJETIVO: COLOCAR UN TIPO DE LETRA
;ENTRADA: A -> NUMERO DE FUENTE


CHG_FONTS:	OR	A
	JR	NZ,CHGFONT1

	LD	BC,PRINT_TLOC1
	LD	(PRINT_TLOC),BC
	LD	A,9
	LD	(PRINT_TSP),A
	LD	A,8
	LD	(PRINT_TSIZE),A
	RET

CHGFONT1	LD	BC,PRINT_TLOC2
	LD	(PRINT_TLOC),BC
	LD	A,4
	LD	(PRINT_TSP),A
	LD	(PRINT_TSIZE),A
	LD	A,8
	LD	(PRINT_TSY+1),A
	RET









;NOMBRE: FOUND_ENLACE
;OBJETIVO: UNA VEZ QUE SE HA DETERMINADO QUE UN PERSONAJE SE HA ENCONTRADO CON
;          UNA CASILLA DE ENLACE SE REALIZA EL CAMBIO DE COORDENADAS
;ENTRADA:  HL -> COORDENADA X
;          DE -> COORDENADA Y
;          IX -> PUNTERO AL PERSONAJE.
;          B  -> SERA O SI EL PERSONAJE DIRIGUE EL SCROLL.
;          A  -> NUMERO DE PERSONAJE
;MODIFICA: HL,DE,BC,IY,AF,HL',BC',DE'


FOUND_ENLACE:	LD	IY,STRENL_VEC
	PUSH	BC
	PUSH	AF
	LD	A,(MOVPCHK_PROF)
	LD	C,A
	LD	B,0
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL

	LD	A,L
	AND	0F8h
	LD	L,A
	LD	A,E
	AND	0F8h
	LD	E,A

	EXX
	LD	B,MAXNUMENL
	LD	DE,STRUCTENLACE

GO_ENLACE1	EXX
	PUSH	HL
	PUSH	DE
	LD	C,(IY+STRENL_XO)
	LD	B,(IY+STRENL_XO+1)
	XOR	A
	SBC	HL,BC
	JR	NZ,GO_ENLACE2

	LD	C,(IY+STRENL_YO)
	LD	B,(IY+STRENL_YO+1)
	XOR	A
	EX	DE,HL
	SBC	HL,BC
	JR	Z,GO_ENLACE3

GO_ENLACE2:	POP	DE
	POP	HL
	EXX
	ADD	IY,DE
	DJNZ	GO_ENLACE1

	POP	BC
	POP	AF
	LD	A,1
	RET


GO_ENLACE3:	POP	DE
	POP	HL
	POP	BC

	XOR	A
	OR	B
	JR	NZ,GO_ENLACE4

	LD	A,(IY+STRENL_TA_OF)
	LD	(MAPRUT_OFF),A
	ADD	A,A
	ADD	A,A
	LD	HL,PROPIEDAD_VEC
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	(PROP_PTR),HL

GO_ENLACE4	LD	L,(IY+STRENL_XD)
	LD	H,(IY+STRENL_XD+1)
	LD	E,(IY+STRENL_YD)
	LD	D,(IY+STRENL_YD+1)
	POP	AF

	LD	C,(IY+STRENL_ADJ)
	PUSH	IX
	CALL	SET_XY
	LD	A,TIMEFADE
	LD	(FADE_V),A
	CALL	FADE_OFF
	POP	IX
	XOR	A
	RET


;NOMBRE: SET_XY
;OBJETIVO: COLOCAR UN PERSONAJE EN LA POSICION XY.
;ENTRADA: HL -> COORDENADA X
;         DE -> COORDENADA Y
;         IX -> PUNTERO AL PERSONAJE.
;         B  -> SERA 0 SI EL PERSONAJE DIRIGUE EL SCROLL.
;         C  -> EN CASO DE QUE B SEA 0 INDICA EL TIPO DE ALINEAMIENTO.
;         A  -> NUMERO DE PERSONAJE

SET_XY:	EX	AF,AF'
	LD	A,L
	AND	0F8h
	LD	L,A
	LD	A,E
	AND	0F8h
	ADD	A,4
	LD	E,A

	LD	(IX+STRPER_X),L
	LD	(IX+STRPER_X+1),H
	LD	(IX+STRPER_Y),E
	LD	(IX+STRPER_Y+1),D


	XOR	A
	OR	B
	RET	NZ

	EX	AF,AF'
	LD	B,MAXNUMPJS
	CP	B
	JR	NC,SET_XY1P
	LD	A,(MODO_GAME)
	CP	INTERIOR
	JR	NZ,SET_XY1P

	LD	B,MAXNUMPJS
	LD	IX,(PTR_PERSO)

SET_XYPJS	LD	(IX+STRPER_X),L
	LD	(IX+STRPER_X+1),H
	LD	(IX+STRPER_Y),E
	LD	(IX+STRPER_Y+1),D
	PUSH	BC
	LD	BC,STRUCTPERSO
	ADD	IX,BC
	POP	BC
	DJNZ	SET_XYPJS


	EXX
	LD	A,80h
	LD	B,TAM_FIFO
	LD	HL,MOVPJSWAY
SET_XYLFIFO	LD	(HL),A
	INC	HL
	DJNZ	SET_XYLFIFO
	EXX


SET_XY1P	LD	B,3
SET_XY1	SRL	H
	RR	L
	DJNZ	SET_XY1

	LD	B,3
SET_XY2	SRL	D
	RR	E
	DJNZ	SET_XY2

	PUSH	HL
	POP	IX
	PUSH	DE
	POP	IY
	LD	A,C


	LD	BC,-NUMPATX+2
	LD	DE,-NUMPATY+5
	EXX
	LD	BC,-NUMPATX2+2
	LD	DE,-NUMPATY2+1


	CP	CEN_TOTAL
	JR	NZ,SET_XY_AJ1
	ADD	IX,BC
	ADD	IY,DE
	JR	SET_XYF

SET_XY_AJ1	CP	CEN_HOR_ARR
	JR	NZ,SET_XY_AJ2
	ADD	IX,BC
	JR	SET_XYF

SET_XY_AJ2	CP	CEN_HOR_ABA
	JR	NZ,SET_XY_AJ3
	ADD	IX,BC
	EXX
	ADD	IY,DE
	JR	SET_XYF

SET_XY_AJ3	CP	CEN_VER_IZQ
	JR	NZ,SET_XY_AJ4
	ADD	IY,DE
	JR	SET_XYF

SET_XY_AJ4	CP	CEN_VER_DER
	JR	NZ,SET_XY_AJ5
	ADD	IY,DE
	EXX
	ADD	IX,BC
	JR	SET_XYF

SET_XY_AJ5	CP	ESQ_SUP_DER
	JR	NZ,SET_XY_AJ6
	EXX
	ADD	IX,BC
	JR	SET_XYF

SET_XY_AJ6	CP	ESQ_INF_IZQ
	JR	NZ,SET_XY_AJ7
	EXX
	ADD	IY,DE
	JR	SET_XYF

SET_XY_AJ7	CP	ESQ_INF_DER
	JR	NZ,SET_XYF
	EXX
	ADD	IX,BC
	ADD	IY,DE

SET_XYF	PUSH	IX
	POP	HL
	PUSH	IY
	POP	DE

	BIT	7,H
	JR	Z,SETXY_TDE
	LD	HL,1




SETXY_TDE	BIT	7,D
	JR	Z,SETXY_TF
	LD	DE,1

SETXY_TF	LD	(DESP_PANTX),HL
	LD	(DESP_PANTY),DE
	LD	A,2
	LD	(MAPEACONT),A
	RET









;NOMBRE: MAKESCROLL
;OBJETIVO: INCREMENTAR LAS VARIABLES DE SCROLL EN FUNCION DE LAS SOLICITUDES



MAKESCROLL:	LD	A,(SCROLLST)
	AND	ARRSCR
	JR	Z,MKSCROLLAB

	LD	HL,(DESP_PANTY)
	DEC	HL
	LD	(DESP_PANTY),HL
	LD	A,2
	LD	(MAPEACONT),A


MKSCROLLAB:	LD	A,(SCROLLST)
	AND	ABASCR
	JR	Z,MKSCROLLIZ

	LD	HL,(DESP_PANTY)
	INC	HL
	LD	(DESP_PANTY),HL
	LD	A,2
	LD	(MAPEACONT),A



MKSCROLLIZ:	LD	A,(SCROLLST)
	AND	IZQSCR
	JR	Z,MKSCROLLDE

	LD	HL,(DESP_PANTX)
	DEC	HL
	LD	(DESP_PANTX),HL
	LD	A,2
	LD	(MAPEACONT),A


MKSCROLLDE:	LD	A,(SCROLLST)
	AND	DERSCR
	RET	Z

	LD	HL,(DESP_PANTX)
	INC	HL
	LD	(DESP_PANTX),HL
	LD	A,2
	LD	(MAPEACONT),A
	RET



;NOMBRE: DOSCROLL
;OBJETIVO: GESTIONAR EL SCROLL DE LA PANTALLA.
;ENTRADA: IX -> PUNTERO AL PERSONAJE QUE DIRIGUE EL MAPA


DOSCROLL:	LD	A,(SWAP_CONT)
	OR	A
	RET	NZ

	LD	L,(IX+STRPER_FIG)	;TODO ESTO ES NECESARIO PARA
	LD	H,(IX+STRPER_FIG+1)	;NO MODIFICAR LA FIGURA
	LD	DE,DOSCR_SFIG
	LD	(IX+STRPER_FIG),E
	LD	(IX+STRPER_FIG+1),D

	PUSH	HL
	PUSH	IX
	CALL	MOVPVIS
	POP	IX
	POP	HL

	LD	C,(IX+STRPER_FIG)
	LD	B,(IX+STRPER_FIG+1)
	LD	(IX+STRPER_FIG),L
	LD	(IX+STRPER_FIG+1),H

	XOR	A
	CP	C
	JR	NZ,DOSCROLL1
	CP	B
	RET	Z


DOSCROLL1	LD	L,(IX+STRPER_X)
	LD	H,(IX+STRPER_X+1)
	LD	B,3
DOSCR1:	SRL	H
	RR	L
	DJNZ	DOSCR1
	LD	(DOSCR_PATX),HL

	LD	L,(IX+STRPER_Y)
	LD	H,(IX+STRPER_Y+1)
	LD	B,3
DOSCR2:	SRL	H
	RR	L
	DJNZ	DOSCR2
	LD	(DOSCR_PATY),HL

	LD	A,(DOSCR_SFIG+STRFIG_YACT)
	AND	0F8h
	LD	E,COORCYAR
	CP	E
	JR	NZ,DOSCROLLAB

	LD	HL,(DOSCR_PATY)
	LD	DE,OFF_PVISYAR
	ADD	HL,DE
	SLA	L
	RL	H
	LD	DE,INDEXMAPA
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)

	LD	HL,(DOSCR_PATX)
	ADD	HL,DE
	LD	A,(HL)
	CP	PATFINSCROLL
	JR	Z,DOSCROLLAB

	LD	A,ARRSCR
	LD	(SCROLLSOL),A

DOSCROLLAB:	LD	A,(DOSCR_SFIG+STRFIG_YACT)
	AND	0F8h
	LD	E,COORCYAB
	CP	E
	JR	NZ,DOSCROLLIZ

	LD	HL,(DOSCR_PATY)
	LD	DE,OFF_PVISYAB
	ADD	HL,DE
	SLA	L
	RL	H
	LD	DE,INDEXMAPA
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	HL,(DOSCR_PATX)
	ADD	HL,DE
	LD	A,(HL)
	CP	PATFINSCROLL
	JR	Z,DOSCROLLIZ

	LD	A,(SCROLLSOL)
	OR	ABASCR
	LD	(SCROLLSOL),A


DOSCROLLIZ:	LD	A,(DOSCR_SFIG+STRFIG_XACT)
	AND	0F8h
	LD	E,COORCXIZ
	CP	E
	JR	NZ,DOSCROLLDE

	LD	HL,(DOSCR_PATY)
	SLA	L
	RL	H
	LD	DE,INDEXMAPA
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	HL,(DOSCR_PATX)
	ADD	HL,DE
	LD	DE,OFF_PVISXIZ
	ADD	HL,DE
	LD	A,(HL)
	CP	PATFINSCROLL
	JR	Z,DOSCROLLDE

	LD	A,(SCROLLSOL)
	OR	IZQSCR
	LD	(SCROLLSOL),A


DOSCROLLDE:	LD	A,(DOSCR_SFIG+STRFIG_XACT)
	AND	0F8h
	LD	E,COORCXDE
	CP	E
	RET	NZ

	LD	HL,(DOSCR_PATY)
	SLA	L
	RL	H
	LD	DE,INDEXMAPA
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	HL,(DOSCR_PATX)
	ADD	HL,DE
	LD	DE,OFF_PVISXDE
	ADD	HL,DE
	LD	A,(HL)
	CP	PATFINSCROLL
	RET	Z

	LD	A,(SCROLLSOL)
	OR	DERSCR
	LD	(SCROLLSOL),A

	RET

DOSCR_PATX:	DW	0
DOSCR_PATY:	DW	0
DOSCR_SFIG:	DS	STRUCTFIGURA



;NOMBRE: SAVE2PLANE
;OBJETIVO: SALVAR AQUELLOS PATRONES PISADOS POR UN PERSONAJE
;ENTRADA: IX -> PUNTERO AL PERSONAJE QUE SE MUEVE


SAVE2PLANE:	LD	L,(IX+STRPER_FIG)
	LD	H,(IX+STRPER_FIG+1)
	PUSH	HL
	POP	IY

	LD	A,(IY+STRFIG_XACT)
	PUSH	AF


	LD	C,0
	LD	B,3
SAVE2PLN1	SRL	A
	RL	C
	DJNZ	SAVE2PLN1

	LD	HL,(DESP_PANTX)
	LD	E,A
	LD	D,0
	ADD	HL,DE

	POP	AF
	AND	0F8h
	LD	(SAVE2PLNXO),A

	PUSH	BC
	LD	A,(IY+STRFIG_YACT)
	PUSH	AF

	LD	C,0
	LD	B,3
SAVE2PLN2	SRL	A
	RL	C
	DJNZ	SAVE2PLN2

	PUSH	HL
	LD	HL,(DESP_PANTY)
	LD	E,A
	LD	D,0
	ADD	HL,DE
	EX	DE,HL
	POP	HL
	POP	AF
	AND	0F8h
	LD	(SAVE2PLNYO),A

	XOR	A
	OR	C
	LD	A,(ALTOPATPER)
	JR	Z,SAVE2PLNX
	INC	A

SAVE2PLNX:	LD	(SAVE2PLNNY),A
	POP	BC
	XOR	A
	OR	C
	LD	A,(ANCHOPATPER)
	JR	Z,SAVE2PLN
	INC	A

SAVE2PLN:	LD	(SAVE2PLNNX),A
	PUSH	HL
	SLA	E
	RL	D
	LD	HL,INDEXMAPA
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	POP	HL
	ADD	HL,DE
	LD	IX,STR2PLN_VEC
	LD	DE,STRUCT2PLANE
	LD	A,(NUMPAT2PLN)
	LD	B,A
	OR	A
	JR	Z,SAVE2PLN3

SAVE2PLN4	ADD	IX,DE
	DJNZ	SAVE2PLN4

SAVE2PLN3:	LD	A,(SAVE2PLNNY)
	LD	B,A
SAVE2PLNBY	PUSH	HL
	PUSH	BC
	LD	A,(SAVE2PLNNX)
	LD	B,A
	LD	A,(SAVE2PLNXO)
	LD	D,A
SAVE2PLNBX	LD	A,(HL)
	EXX
	LD	C,A
	LD	B,0
	LD	HL,(PROP_PTR)
	ADD	HL,BC
	LD	A,(HL)
	EXX
	BIT	1,A
	JR	Z,SAVE2PLNN2

	LD	A,(HL)
	LD	(IX+STR2PLN_PAT),A
	LD	(IX+STR2PLN_X),D
	LD	A,(SAVE2PLNYO)
	LD	(IX+STR2PLN_Y),A
	LD	A,(NUMPAT2PLN)
	INC	A
	LD	(NUMPAT2PLN),A
	EXX
	LD	DE,STRUCT2PLANE
	ADD	IX,DE
	EXX

SAVE2PLNN2:	INC	HL
	LD	A,8
	ADD	A,D
	LD	D,A
	DJNZ	SAVE2PLNBX

	POP	BC
	POP	HL
	LD	DE,(TAM_FILA_MTEX)
	ADD	HL,DE
	LD	A,(SAVE2PLNYO)
	ADD	A,8
	LD	(SAVE2PLNYO),A
	DJNZ	SAVE2PLNBY
	RET


SAVE2PLNNY:	DB	0
SAVE2PLNNX:	DB	0
SAVE2PLNXO:	DB	0
SAVE2PLNYO:	DB	0




;NOMBRE:PUT2PLANE
;OBJETIVO: RESTAURAR AQUELLOS PATRONES DEL SEGUNDO PLANO QUE HAN SIDO PISADOS
;          POR ALGUN PERSONAJE.



PUT2PLANE:	LD	A,(NUMPAT2PLN)
	OR	A
	RET	Z

	LD	B,A
	LD	IX,STR2PLN_VEC
	LD	DE,STRUCT2PLANE
	LD	A,(PAG_NACT)
	LD	(MAPEAPD),A
PUT2PLN1	LD	A,(IX+STR2PLN_PAT)
	EXX
	LD	B,0
	RLA
	RL	B
	RLA
	RL	B
	RLA
	RL	B
	SLA	B
	SLA	B
	SLA	B
	LD	(MAPEAXO),A

	LD	A,(MAPRUT_OFF)
	ADD	A,B
	ADD	A,COORDY_PAT
	LD	(MAPEAYO),A

	LD	A,(IX+STR2PLN_X)
	ADD	A,OFF_PANTX
	LD	(MAPEAXD),A

	LD	A,(IX+STR2PLN_Y)
	ADD	A,OFF_PANTY
	LD	(MAPEAYD),A

	LD	HL,MAPEAXO
	CALL	WAIT_COM
	CALL	COPYVRAM
	EXX
	ADD	IX,DE
	DJNZ	PUT2PLN1
	RET






;NOMBRE: INITFIGURA
;OBJETIVO: INICIALIZAR LOS DATOS DE UNA FIGURA, ADEMAS DE SALVAR EL FONDO
;          DE LA PAGINA OCULTA Y COPIAR EL PERSONAJE A DICHA PAGINA.
;ENTRADA: B -> COORDENADA Y
;         C -> COORDENADA X
;         H -> DIRECCION INICIAL
;         L -> PATRON
;SALIDA: PUNTERO A LA FIGURA CORRESPONDIENTE. SI NO SE ENCUENTRAN FIGURAS LIBRES
;        SERA 0.
;MODIFICA: AF,AF',BC,DE,IX,HL



INITFIGURA:	LD	IX,STRFIG_VECTOR
	PUSH	BC
	LD	B,MAXFIGURAS
	LD	DE,STRUCTFIGURA
INITFIGURA1	LD	A,(IX+STRFIG_OCUP)
	OR	A
	JR	NZ,INITFIGURA2
	LD	A,(IX+STRFIG_BRD)
	OR	A
	JR	Z,INITFIGURA3

INITFIGURA2:	ADD	IX,DE
	DJNZ	INITFIGURA1

	LD	HL,0
	POP	BC
	RET


INITFIGURA3:	LD	A,1
	LD	(IX+STRFIG_OCUP),A
	LD	(IX+STRFIG_PAT),L
	LD	(IX+STRFIG_DIRE),H

	RES	7,H
	LD	B,H
	LD	E,0FFh
	LD	D,H
	LD	A,(ANIMACIONI)
	CALL	AU_ANIMACION
	LD	(IX+STRFIG_ANIM),A
	LD	(IX+STRFIG_REPT),C


	POP	BC
	LD	(IX+STRFIG_YANT),B
	LD	(IX+STRFIG_YACT),B
	LD	(IX+STRFIG_XACT),C
	LD	(IX+STRFIG_XANT),C


	PUSH	IX
	POP	HL
	RET



;NOMBRE: GFIG_MOVAC
;OBJETIVO: GESTIONAR LA ESTRUCTURA DE LA INFORMACION DEL MOVIMIENTO
;          DE UNA FIGURA, ASI COMO REALIZAR FISICAMENTE EL MOVMIENTO.
;ENTRADA:  HL -> PUNTERO A LA FIGURA
;          B  -> COORDENADA Y
;          C  -> COORDENADA X
;          E  -> DIRECCION
;MODIFICA: AF,AF',BC,HL,DE,IX




GFIG_MOVAC:	PUSH	HL
	POP	IX
	PUSH	BC
	LD	C,(IX+STRFIG_REPT)
	LD	B,E
	LD	E,(IX+STRFIG_DIRE)
	LD	(IX+STRFIG_DIRE),B
	LD	A,(IX+STRFIG_ANIM)
	CALL	AU_ANIMACION
	LD	(IX+STRFIG_ANIM),A
	LD	(IX+STRFIG_REPT),C


	POP	BC
	LD	(IX+STRFIG_YACT),B
	LD	(IX+STRFIG_XACT),C
	RET




;NOMBRE: WRITE_PNA
;OBJETIVO: ESCRIBIR EN LA PAGINA ACTIVA TODOS LOS PERSONAJES QUE SE ESTAN
;          VIENDO EN UN MOMENTO DETERMINADO.
;MODIFICA: AF,BC,DE,HL,IX,AF'




WRITE_PNA:	LD	A,(MODO_GAME)
	CP	EXTERIOR
	JR	NZ,WRITE_0

	LD	A,(WRITE_CONT)
	OR	A
	RET	Z
	DEC	A
	LD	(WRITE_CONT),A

WRITE_0:	LD	B,MAXFIGURAS
WRITEPNA0	LD	IX,STRFIG_VECTOR+(STRUCTFIGURA*(MAXFIGURAS-1))
	LD	DE,-STRUCTFIGURA
	XOR	A
	LD	(WRT_PA_ENC),A
	LD	A,255
	LD	(WRT_PA_MAY),A
	PUSH	BC
	LD	B,MAXFIGURAS

WRITEPNA1	LD	A,(IX+STRFIG_OCUP)
	OR	A
	JR	Z,WRITEPNA2

	LD	A,(IX+STRFIG_WRT)
	OR	A
	JR	NZ,WRITEPNA2

	LD	A,(WRT_PA_MAY)
	LD	C,A
	LD	A,(IX+STRFIG_YACT)
	CP	C
	JR	NC,WRITEPNA2

	LD	(WRT_PA_MAY),A
	LD	A,1
	LD	(WRT_PA_ENC),A
	PUSH	IX
	POP	HL
	LD	(WRT_PA_PTR),HL
WRITEPNA2	ADD	IX,DE
	DJNZ	WRITEPNA1

	POP	BC
	LD	A,(WRT_PA_ENC)
	OR	A
	JR	Z,WRITEPNA3

	LD	IX,(WRT_PA_PTR)
	LD	A,4
	LD	(IX+STRFIG_BRD),A
	LD	A,1
	LD	(IX+STRFIG_WRT),A
	LD	B,(IX+STRFIG_YACT)
	LD	C,(IX+STRFIG_XACT)
	LD	L,(IX+STRFIG_PAT)
	LD	H,(IX+STRFIG_ANIM)
	CALL	MOVFIGAC
	DJNZ	WRITEPNA0
WRITEPNA3	CALL	PUT2PLANE
	RET


WRT_PA_PTR:	DW	0
WRT_PA_MAY:	DB	0
WRT_PA_ENC:	DB	0



;ESTA FUNCION SE ENCARGA DE BORRAR LAS PARTES OCULTAS DE TODAS LAS
;FIGURAS QUE ESTEN EN LA PANTALLA



ERASE_PNA:	LD	A,(SINCRO)	;ESPERA AL CAMBIO DE PAGINA
	OR	A
	JR	NZ,ERASE_PNA

	LD	A,(FADE_V)
	OR	A
	JR	Z,ERASE_0

	DEC	A
	LD	(FADE_V),A
	JR	NZ,ERASE_0

	CALL	FADE_ON

ERASE_0:	LD	A,(MODO_GAME)
	CP	EXTERIOR
	JR	NZ,ERASE0

	LD	A,(WRITE_CONT)
	OR	A
	RET	Z

ERASE0	LD	DE,STRUCTFIGURA
	LD	IX,STRFIG_VECTOR
	LD	B,MAXFIGURAS

ERASE1	LD	A,(IX+STRFIG_BRD)
	OR	A
	JR	Z,ERASE2
	DEC	A
	LD	(IX+STRFIG_BRD),A

	PUSH	BC
	PUSH	DE
	PUSH	IX

	LD	A,(IX+STRFIG_YANT)
	LD	C,A
	LD	A,(IX+STRFIG_XANT)
	LD	B,A

	CALL	MOVFIGDC

	XOR	A
	LD	(IX+STRFIG_WRT),A

	LD	A,(IX+STRFIG_YACT)
	LD	(IX+STRFIG_YANT),A
	LD	A,(IX+STRFIG_XACT)
	LD	(IX+STRFIG_XANT),A

	POP	IX
	POP	DE
	POP	BC

ERASE2	ADD	IX,DE
	DJNZ	ERASE1

	RET




;NOMBRE: AU_ANIMACION
;OBJETIVO: DETERMINA EL SIGUIENTE FRAME DE UNA ANIMACION A PARTIR DEL FRAME
;          ACTUAL Y DE LA DIRECCION SIGUIENTE.
;ENTRADA:   A -> FRAME ACTUAL
;           B -> DIRECCION
;           C -> REPETICION
;           E -> DIRECCION ANTERIOR
;           SI EL BIT MAS SIGNIFICATIVO DE B ESTA A 1 ES NINGUNA DIRECCION
;SALIDA:    A -> FRAME SIGUIENTE
;           C -> NUMEO DE REPETICION.
;MODIFICA: AF,AF',B,HL



AU_ANIMACION:	PUSH	DE
	BIT	7,B
	JR	NZ,AUANIM1

	EX	AF,AF'
	LD	A,E
	CP	B
	JR	NZ,AUANIM2

	LD	A,(NUMREPFRAME)
	CP	C
	JR	Z,AUANIM2
	JR	NC,AUANIM3

AUANIM2	LD	A,B
;               JR      AUANIMC          ;ESTE SALTO ESTA AQUI POR QUE SI NO
;                                        ;NO FUNCIONA HACIA ABAJO.
	CP	ARR_DER			 ;REDUZCO LAS DIRECCIONES A 4
	JR	NZ,AUANIM_ARI
	LD	A,ARRIBA
	JR	AUANIMC

AUANIM_ARI	CP	ARR_IZQ
	JR	NZ,AUANIM_ABD
	LD	A,ARRIBA
	JR	AUANIMC

AUANIM_ABD	CP	ABA_DER
	JR	NZ,AUANIM_ABI
	LD	A,ABAJO
	JR	AUANIMC

AUANIM_ABI	CP	ABA_IZQ
	JR	NZ,AUANIMC
	LD	A,ABAJO

AUANIMC	LD	B,A
	EX	AF,AF'
	RLCA
	RLCA
	ADD	A,B
	LD	HL,(AUTO_PTR)
	LD	D,0
	LD	E,A
	ADD	HL,DE
	LD	C,0
	LD	A,(HL)
	JR	AUANIM1
AUANIM3	EX	AF,AF'
	INC	C
AUANIM1	POP	DE
	RET


AUTO_PTR:	DW	0

;                     DE,IZ,AR,AB

FT_AUTOC	DB	1,3,9,6	;ESTA TABLA REPRESENTA LA FUNCION
	DB	2,3,9,6	;DE TRANSFERENCIA DE LA MAQUINA DE MOORE
	DB	0,3,9,6	;QUE GOBIERNA LAS ANIMACIONES
	DB	0,4,9,6
	DB	0,5,9,6
	DB	0,3,9,6
	DB	0,3,9,7
	DB	0,3,9,8
	DB	0,3,9,6
	DB	0,3,10,6
	DB	0,3,11,6
	DB	0,3,9,6
	DB	0,3,9,6


;                     DE,IZ,AR,AB

;                     DE,IZ,AR,AB


FT_AUTOE	DB	4,2,2,2	;0  DIAGONAL SUPERIOR IZQUIERDA
	DB	5,2,2,2	;1  DIAGONAL INFERIOR IZQUIERDA
	DB	1,3,3,3	;2  IZQUIERDA
	DB	2,2,2,2	;3  IZQUIERDA ANDANDO
	DB	6,0,6,6	;4  DIAGONAL SUPERIOR DERECHA
	DB	6,1,6,6	;5  DIAGONAL INFERIOR DERECHA
	DB	7,4,7,7	;6  DERECHA
	DB	6,6,6,6	;7  DERECHA ANDANDO
	DB	6,2,6,2	;8  ESTA ESTADO ES FICTICIO Y
;                                           TAN SOLO SIRVE PARA QUE EL
;                                           PERSONAJE SE QUEDE MIRANDO
;                                           HACIA DONDE DEBE




;NOMBRE: MULTHLDE
;OBJETIVO: MULTIPLICAR HL POR DE
;ENTRADA: HL -> PRIMER OPERANDO
;         DE -> SEGUNDO OPERANDO
;SALIDA: HL -> RESULTADO
;MODIFICA: AF,BC,HL,DE


MULTHLDE:	LD	A,16
	LD	C,L
	LD	B,H
	LD	HL,0
MULTHLDEL	BIT	0,E
	JR	Z,MULTHLDENA
	ADD	HL,BC
MULTHLDENA	SLA	C
	RL	B
	RR	D
	RR	E
	DEC	A
	JR	NZ,MULTHLDEL
	RET




;NOMBRE: MOVFIGAC   (AC ---> ANTES DE CAMBIO DE PAGINA)
;OBJETIVO: SALVAR EL FONDO DE LA PAGINA OCULTA Y COPIAR LA ANIMACION
;          CORRESPONDIENTE DEL PERSONAJE.
;PARAMETROS DE ENTRADA: B -> COORDENADA Y ANTES DEL MOVIMIENTO
;                       C -> COORDENADA X ANTES DEL MOVIMIENTO
;                       L -> NUMERO DE PATRON
;                       H -> NUMERO DE FRAME


MOVFIGAC:	LD	A,(PAG_NACT)
	LD	(MOVEFIGCOPYT+7),A
	LD	A,C
	ADD	A,OFF_PANTX
	LD	(MOVEFIGCOPYT+4),A
	LD	A,B
	ADD	A,OFF_PANTY
	LD	(MOVEFIGCOPYT+6),A

	SLA	L
	LD	C,H
	LD	H,0
	LD	DE,(TBLCP_PTR)
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	SLA	C
	LD	B,0
	LD	HL,(TBLAN_PTR)
	ADD	HL,BC
	LD	B,(HL)
	INC	HL
	LD	C,(HL)

	LD	A,B
	ADD	A,D
	LD	(MOVEFIGCOPYT+0),A
	LD	A,C
	ADD	A,E
	LD	(MOVEFIGCOPYT+2),A

	LD	HL,MOVEFIGCOPYT
	CALL	WAIT_COM
	CALL	COPYVRAM
	RET


TBLCP_PTR:	DW	0
TBLAN_PTR:	DW	0


TABLA_PATC:	DB	0,0
	DB	0,64
	DB	0,128
	DB	0,192
	DB	84,0
	DB	84,64
	DB	84,128
	DB	84,192
	DB	168,0
	DB	168,64
	DB	168,128
	DB	168,192


TABLA_PATE:	DB	0,0
	DB	0,64
	DB	0,128
	DB	0,192
	DB	128,0
	DB	128,64
	DB	128,128
	DB	128,192


TABLA_ANIMC:	DB	0,0
	DB	0,28
	DB	0,56
	DB	16,0
	DB	16,28
	DB	16,56
	DB	32,0
	DB	32,28
	DB	32,56
	DB	48,0
	DB	48,28
	DB	48,56


TABLA_ANIMAE:	DB	0,0
	DB	0,32
	DB	0,64
	DB	0,96
	DB	32,0
	DB	32,32
	DB	32,64
	DB	32,96




;NOMBRE: MOVFIGDC
;OBJETIVO: RESTAURAR EL FONDO DE LA FIGURA DE LA PAGINA OCULTA
;ENTRADA:
;ENTRADA: C -> COORDENADA Y ANTERIOR (ES DECIR LA DE LA PAGINA OCULTA)
;         B -> COORDENADA X ANTERIOR
;MODIFICA: AF,BC,HL,AF',BC',HL'



MOVFIGDC:	LD	A,(PAG_NACT)
	LD	(MAPEAPD),A
	LD	A,B
	AND	0F8h
	ADD	A,OFF_PANTX
	LD	(MOVFDCX),A

	LD	A,C
	AND	0F8h
	ADD	A,OFF_PANTY
	LD	(MOVFDCY),A

	LD	D,B
	LD	E,C
	LD	B,3
	XOR	A
MOVFDC1	SRL	D
	RR	A
	DJNZ	MOVFDC1
	OR	A
	LD	A,(ANCHOPATPER)
	JR	Z,MOVFDC2
	INC	A

MOVFDC2	LD	(MOVFDCNX),A
	LD	B,3
	XOR	A
MOVFDC3	SRL	E
	RR	A
	DJNZ	MOVFDC3
	OR	A
	LD	A,(ALTOPATPER)
	JR	Z,MOVFDC4
	INC	A

MOVFDC4:	LD	(MOVFDCNY),A
	LD	HL,(DESP_PANTY)
	LD	C,D
	LD	D,0
	LD	B,0
	ADD	HL,DE
	SLA	L
	RL	H

	LD	DE,INDEXMAPA
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	HL,(DESP_PANTX)
	ADD	HL,DE
	ADD	HL,BC

	LD	A,(MOVFDCNY)	;EMPIEZA EL BUCLE PARA LA Y
	LD	B,A
MOVFDC5	PUSH	BC
	PUSH	HL
	LD	A,(MOVFDCY)
	LD	(MAPEAYD),A
	ADD	A,8
	LD	(MOVFDCY),A

	LD	A,(MOVFDCNX)
	LD	B,A
	LD	D,H
	LD	E,L
	LD	A,(MOVFDCX)
	LD	L,A
MOVFDC6	LD	A,(DE)
	LD	C,A
	AND	1Fh
	RLCA
	RLCA
	RLCA
	LD	(MAPEAXO),A
	LD	A,C
	AND	0E0h
	RRCA
	RRCA
	LD	C,A
	LD	A,(MAPRUT_OFF)
	ADD	A,C
	ADD	A,COORDY_PAT
	LD	(MAPEAYO),A
	LD	A,L
	LD	(MAPEAXD),A
	ADD	A,8
	LD	L,A
	EXX

	CALL	WAIT_COM
	LD	HL,MAPEAXO
	CALL	COPYVRAM
	EXX
	INC	DE
	DJNZ	MOVFDC6

	POP	HL
	EX	DE,HL
	LD	HL,(TAM_FILA_MTEX)
	ADD	HL,DE
	POP	BC
	DJNZ	MOVFDC5
	RET


MOVFDCNX:	DB	00H
MOVFDCNY:	DB	00H
MOVFDCX:	DB	00H
MOVFDCY:	DB	00H


MOVEFIGCOPYT:	DB	0,0,0
PAG_COPYT:	DB	PAG_PERSO,0,0,0,0
ANCHOPIXPER:	DB	0,0
ALTOPIXPER:	DB	0,0,0,0,98h








;NOMBRE: MAPRUT
;OBJETIVO: CREAR UNA PANTALLA MEDIANTE TEXTURAS DE 8X8
;ENTRADA:  (MAPEAPO): PAGINA DONDE SE ENCUENTRAN LAS TEXTURAS
;MODIFICA: AF,BC,HL



MAPRUT:	LD	A,(MAPEACONT)
	OR	A
	RET	Z

	DEC	A
	LD	(MAPEACONT),A
	LD	A,(PAG_NACT)
	LD	(MAPEAPD),A

	LD	DE,(DESP_PANTY)
	SLA	E
	RL	D
	LD	HL,INDEXMAPA
	ADD	HL,DE
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	LD	HL,(DESP_PANTX)
	ADD	HL,BC
	EX	DE,HL

	LD	HL,(MAPEAPTR)
	LD	A,OFF_PANTY
	LD	(MAPEAYD),A

	LD	B,NUMPATY
MAPRUTBY	PUSH	BC
	PUSH	DE
	LD	A,OFF_PANTX
	LD	(MAPEAXD),A

	LD	B,NUMPATX
MAPRUTBX	LD	C,(HL)
	LD	A,(DE)
	CP	C
	JR	Z,MAPRUT3

	LD	(HL),A
	EXX
	OR	A	;ESTE OR A ES PARA PONER CY A 0
	LD	B,0
	RLA
	RL	B
	RLA
	RL	B
	RLA
	RL	B
	SLA	B
	SLA	B
	SLA	B
	LD	(MAPEAXO),A
	LD	A,(MAPRUT_OFF)
	ADD	A,B
	ADD	A,COORDY_PAT
	LD	(MAPEAYO),A

	CALL	WAIT_COM
	LD	HL,MAPEAXO
	CALL	COPYVRAM
	EXX

MAPRUT3	LD	A,(MAPEAXD)
	ADD	A,8
	LD	(MAPEAXD),A
	INC	DE
	INC	HL
	DJNZ	MAPRUTBX

	LD	A,(MAPEAYD)
	ADD	A,8
	LD	(MAPEAYD),A
	EX	DE,HL
	POP	HL
	LD	BC,(TAM_FILA_MTEX)
	ADD	HL,BC
	EX	DE,HL
	POP	BC
	DJNZ	MAPRUTBY
	RET


MAPEAXO:	DW	0
MAPEAYO:	DB	0
MAPEAPO:	DB	PAG_PATRONES
MAPEAXD:	DW	0
MAPEAYD:	DB	0
MAPEAPD:	DB	0
MAPEANX:	DW	8
MAPEANY:	DW	8
		DB	0
		DB	0
		DB	0D0h



PROF_PERSO:		DW	0
PROF_PERSOAR:		DW	0
TAM_FILA_MTEX:		DW	0
PAG_ACT:		DB	0
PAG_NACT:		DB	0
PTR_PERSO:		DW	STRPER_VECCIT
MODO_GAME:		DB	0
NUMREPFRAME:		DB	0
ANCHOPATPER:		DB	0
ALTOPATPER:		DB	0
INC_MOV:		DW	0
MAPEACONT:		DB	0
MAPRUT_OFF:		DB	0
PROP_PTR:		DW	0
MAPEAPTR:		DW	BUFFER_PAG1
MAPEAPTRA:		DW	BUFFER_PAG2
ANIMACIONI:		DB	0
PERIODO:		DB	0
FADE_V:			DB	0
DIR_ACTUAL:		DB	0
FUNC_ACT:		DB	0 

DESP_PANTX:		DW	0
DESP_PANTY:		DW	0
SCROLLST:		DB	0
SCROLLSOL:		DB	0
NUMPAT2PLN:		DB	0
SINCRO:			DB	0
SOL_CHGP:		DB	0
MAXVALXR:		DW	0
MAXVALYR:		DW	0
WRITE_CONT:		DB	0

NAMESP:		DB	0,"SPRITES DAT"
NOMNIVEL:	DB	0,"NIVEL1  DAT"
NOMTIPOS:	DB	0,"NIVEL1  TIP"
MARC1:		DB	0,"MARC1   RAW"
MARC2:		DB	0,"MARC2   RAW"
MARC3:		DB	0,"MARC3   RAW"
OBJETOS:	DB	0,"OBJ     RAW"
FONTS:		DB	0,"FONTS   RAW"
OPTIONS:	DB	0,"OPTION  RAW"
NOM_OBJ:	DB	0,"OBJECT  DSC"
CARAS:		DB	0,"CARAS   RAW"


GRAF_OBJ:	DB	0,0,16,0,32,0,48,0,64,0,80,0,98,0
		DB	0,16,16,16,32,16,48,16,64,16,80,16,98,16
		DB	0,32,16,32,32,32,48,32,64,32,80,32,98,32
		DB	0,48,16,48,32,48,48,48,64,48,80,48,98,48


INVENTARIOV:
PAZOS_INV:	DB	0,-1,-1, 2,-1,-1, 3,-1,-1,-1, 1,-1,-1,-1,-1
		DB	-1,-1,-1, 7,-1, 3,-1,-1, 5,-1,-1,-1,-1,-1,-1
		DB	-1, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6,-1,-1,-1



;EQUIPO PUESTO DE PAZOS
EQUIPOV:
PAZOS_EQP:	DB	-1,-1,-1,-1,-1,-1,-1,-1
		DB	-1,-1,-1,-1,-1,-1,-1,-1
		DB	-1,-1,-1,-1,-1,-1,-1,-1




;TABLA DE SPRITES


PROP_EXT_VEC:	
		DB	00h,00h,80h,00h,00h,00h,00h,00h





	
	include "init.asm"
	include "openmsx.asm"
	include "pers.asm"
	include "sys.asm"
	include "control.asm"
	include "obj.asm"
	include "demo.asm"
	include "video.asm"
	include "file.asm"
	include "song.asm"
 
final:
MusicDrv:		
	phase AdrMusic
Imcdrv:		
	include "mcdrv.asm"
Fmcdrv:		
		
