RG0SAV	equ	0F3DFh
RG1SAV	equ	0F3E0h
RG8SAV	equ	0FFE7h


;DEFINICION DE MACROS QUE SIRVEN PARA EL MANEJO DE SPRITES


PAG_DATASP	equ	1
SPRITECOLOR	equ	7400h
SPRITEATTRIB	equ	7600h
SPRITEGENERA	equ	7800h

MAXNUMSP	equ	16


SPY		equ	0
SPX		equ	1
SPP		equ	2


SPRITE_CRUZ	equ	8
PATTERN_CRUZ	equ	32
SPRITE_CUAD	equ	0
PATTERN_CUAD	equ	0





;NOMBRE: COPYVRAM
;OBJETIVO: COPIAR UN BLOQUE DE VRAM A VRAM
;	     Tambien es usada para otros comandos con igual
;	     numero de parametros.
;ENTRADA: HL -> PUNTERO A LOS DATOS DEL COPY.


COPYVRAM:	DI
	LD	A,32
	OUT	(99h),A
	LD	A,128+17
	OUT	(99h),A

	LD	C,9Bh
	LD	B,15
	OTIR
	EI
	RET



;NOMBRE: LINE
;OBJETIVO: DIBUJAR UNA LINEA
;ENTRADA: H -> COORDENADA X ORIGEN
;         L -> COORDENADA Y ORIGEN
;         D -> COORDENADA X DESTINO
;         E -> COORDENADA Y DESTINO
;         A -> PAGINA
;         B -> OPERACION LOGICA
;         C -> COLOR



LINE:	LD	(LINED+3),A
	LD	A,C
	LD	(LINED+8),A
	LD	A,H
	LD	(LINED+0),A
	LD	A,L
	LD	(LINED+2),A


	LD	A,H
	SUB	D
	LD	D,A
	LD	H,00000100b
	JR	NC,LINE1
	LD	H,0
	NEG
	LD	D,A


LINE1	LD	A,L
	SUB	E
	LD	E,A
	LD	L,00001000b
	JR	NC,LINE2
	LD	L,0
	NEG

LINE2	CP	D
	LD	E,1
	JR	NC,LINE3
	LD	E,0
	LD	C,A
	LD	A,D
	LD	D,C


LINE3	LD	(LINED+4),A
	LD	A,D
	LD	(LINED+6),A

	LD	A,E
	OR	H
	OR	L
	LD	(LINED+9),A
	LD	A,70h
	OR	B
	LD	(LINED+10),A

	CALL	WAIT_COM
	LD	HL,LINED
	DI
	LD	A,24h
	OUT	(99h),A
	LD	A,91h
	OUT	(99h),A
	LD	C,9Bh
	LD	B,0Bh
	OTIR
	EI
	RET



LINED:	DB	0,0,0,0,0,0,0,0,0,0,0





;NOMBRE: GOTO_SPXYG
;OBJETIVO: COLOCAR UN SPRITE EN UN LUGAR DETERMINADO, ENTRE LOS LIMITES DEL
;          MARCADOR.
;ENTRADA:   C  -> NUMERO DE SPRITE
;           B  -> NUMERO DE SPRITES
;           D  -> COORDENADA X
;           E  -> COORDENADA Y


GOTO_SPXYG:
	LD	A,OFF_PANTX+8
	ADD	A,D
	LD	D,A
	LD	A,OFF_PANTY+8
	ADD	A,E
	LD	E,A


;NOMBRE: GOTO_SPXY
;OBJETIVO: COLOCAR UN SPRITE EN UN LUGAR DETERMINADO.
;ENTRADA:   C  -> NUMERO DE SPRITE
;           B  -> NUMERO DE SPRITES
;           D  -> COORDENADA X
;           E  -> COORDENADA Y


GOTO_SPXY:	LD	A,B

	LD	H,0
	LD	L,C
	LD	BC,SPRITE_TBL

	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC

	LD	B,A
G_SPXY1
	LD	A,E
	LD	(HL),A
	INC	HL
	LD	A,D
	LD	(HL),A
	INC	HL
	INC	HL
	INC	HL
	DJNZ	G_SPXY1
	RET




INIT_CRUZ:
	LD	HL,CRUZSP1
	LD	DE,CRUZSPC1
	LD	A,SPRITE_CRUZ
	LD	C,PATTERN_CRUZ
	LD	B,2
	CALL	INITP16x16
	RET





HIDE_CRUZ:	LD	C,SPRITE_CRUZ
	LD	B,2
	LD	D,255
	LD	E,255
	CALL	GOTO_SPXY
	RET


;NOMBRE: INIT_SPTBL
;OBJETIVO: INICIALIZA LA TABLA DE SPRITES (TANTO RAM COMO VRAM) A 255



INIT_SPTBL:	RET




;NOMBRE: INITP16x16
;OBJETIVO: INICIALIZAR LOS PATRONES QUE CONFORMAN UN PERSONAJE DE 16x16
;HL->PUNTERO A LOS PATRONES
;DE->PUNTERO A LA TABLA DE COLORES
;A-> NUMERO DEL SPRITE DE INICIO
;C-> NUMERO DE PATRON DEL PRIMER SPRITE
;B-> NUMERO DE SPRITES

;ERRORRES DETECTADOS: PARA SPRITES DISTINTOS DE 0 NO COLOCA BIEN LOS COLORES.
;                     NO ACTUALIZA EL VALOR DE LA TABLA DE SPRITES RAM.
;                     ME PARECE QUE TAMPOCO COLOCA BIEN LOS PATRONES.
;ESTA FUNCION ES NECESARIO PASARLA POR UN DEBUGGER Y PROBAR MUCHOS CASOS DISTINTOS



INITP16x16:	PUSH	DE
	LD	(INITP16x16A),A

	LD	A,B
	LD	(INITP16x16A2),A

	LD	A,C
	LD	(INITP16x16A3),A

	XOR	A
INITP16x16B1	ADD	A,4	;PARA HALLAR EL NUMERO TOTAL DE PATRONES
	DJNZ	INITP16x16B1


	LD	B,C
	LD	C,A
	CALL	PUTSPPATERN

	POP	HL
	LD	A,(INITP16x16A2)
	LD	C,A
	LD	A,(INITP16x16A)
	LD	B,A
	CALL	PUTSPCOLOR

	LD	HL,SPRITE_TBL
	LD	A,(INITP16x16A)
	LD	D,0
	LD	E,A
	SLA	E
	SLA	E
	ADD	HL,DE

	LD	A,(INITP16x16A3)
	LD	E,A
	LD	A,(INITP16x16A2)
	LD	D,A

INITP16x16B2	LD	A,50
	LD	(HL),A
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(HL),E
	INC	HL
	INC	HL
	LD	A,E
	ADD	A,4
	LD	E,A
	DEC	D
	JR	NZ,INITP16x16B2

	RET


INITP16x16A	DB	0
INITP16x16A2	DB	0
INITP16x16A3	DB	0



;NOMBRE: PUT_SPRITE
;OBJETIVO: ACTUALIZAR  DATOS DE LOS SPRITES


PUT_SPRITE:
	LD A,PAG_DATASP
	LD HL,SPRITEATTRIB
	DI
	CALL SET_VRAM_AD
	LD HL,SPRITE_TBL
	LD C,98h

	REPT MAXNUMSP*4
	OUTI
	ENDM
	EI
	RET


;NOMBRE: INCXY_SP
;OBJETIVO: INCREMENTAR LA X E Y DE UNOS SPRITES.
;ENTRADA: B -> NUMERO DE SPRITES
;         C -> NUMERO DE SPRITE
;         D -> INCREMENTO EN X
;         E -> INCRMENTO  EN Y


INCXY_SP:	LD	HL,SPRITE_TBL
	LD	A,B
	LD	B,0
	SLA	C
	RL	B
	SLA	C
	RL	B
	ADD	HL,BC

	LD	B,A
INCXY_SP1	LD	A,(HL)
	ADD	A,E
	LD	(HL),A
	INC	HL
	LD	A,(HL)
	ADD	A,D
	LD	(HL),A
	INC	HL
	INC	HL
	INC	HL
	DJNZ	INCXY_SP1
	RET






;NOMBRE: PUTSPPATERN
;OBJETIVO: COLOCAR UN NUMERO DE PATRONES DE SPRITES
;ENTRADA: B:NUMERO DEL PATRON DE INICIO
;         C:NUMERO DE PATRONES A ESCRIBIR
;         HL: BUFFER DONDE SE ENCUENTRAN LOS PATRONES
;MODIFICA: HL,DE,BC,AF


PUTSPPATERN:	PUSH	HL
	LD	E,B
	LD	D,0
	SLA	E	;DIRECCIONO EL PATRON HALLANDO EL OFFSET
	RL	D	;MULTIPLICANDO EL NUMERO DE PATRON
	SLA	E	;POR 8, ES DECIR DESPLAZO TRES LUGARES
	RL	D	;A LA IZQUIERDA
	SLA	E
	RL	D

	LD	HL,SPRITEGENERA	;PARA HALLAR ASI LA DIRECCION BASE
	ADD	HL,DE

	LD	A,PAG_DATASP
	CALL	SET_VRAM_AD

	LD	B,C	;VAMOS AHORA CON EL BUCLE DE CARGA DE
	LD	C,98h	;LOS PATRONES DETERMINADOS EN C, Y
	POP	HL	;APUNTADOS POR EL VALOR EN HL AL
PUTSP_PL	PUSH	BC	;ENTRAR EN LA FUNCION
	LD	B,8
	OTIR
	POP	BC
	DJNZ	PUTSP_PL
	EI
	RET


;NOMBRE: PUTSPCOLOR
;OBJETIVO: COLOCAR UN NUMERO DE COLORES DE SPRITES
;ENTRADA: B:NUMERO DEL SPRITE DE INICIO
;         C:NUMERO DE SPRITES A ESCRIBIR
;         HL: BUFFER DONDE SE ENCUENTRAN LOS COLORES
;MODIFICA: HL,DE,BC,AF


PUTSPCOLOR:	PUSH	HL
	LD	L,B
	LD	H,0

	LD	B,4
PUTSP_CL1	SLA	L
	RL	H
	DJNZ	PUTSP_CL1

	LD	DE,SPRITECOLOR	;PARA HALLAR ASI LA DIRECCION BASE
	ADD	HL,DE

	LD	A,PAG_DATASP
	CALL	SET_VRAM_AD

	LD	B,C	;VAMOS AHORA CON EL BUCLE DE CARGA DE
	LD	C,98h	;LOS PATRONES DETERMINADOS EN C, Y
	POP	HL	;APUNTADOS POR EL VALOR EN HL AL
PUTSP_CL2	PUSH	BC	;ENTRAR EN LA FUNCION
	LD	B,16
	OTIR
	POP	BC
	DJNZ	PUTSP_CL2
	EI
	RET


;NOMBRE: PUTSPPATTRIB
;OBJETIVO: MODIFICA LOS ATRIBUTOS DE UN SPRITE
;ENTRADA: B:NUMERO DEL SPRITE DE INICIO
;         C:NUMERO DE SPRITES
;MODIFICA: HL,DE,BC,AF


PUTSPATTRIB:	LD	E,B
	LD	D,0
	SLA	E	;DIRECCIONO EL PATRON HALLANDO EL OFFSET
	RL	D	;MULTIPLICANDO EL NUMERO DE SPRITE
	SLA	E	;POR 4, ES DECIR DESPLAZO DOS LUGARES
	RL	D	;A LA IZQUIERDA

	LD	HL,SPRITEATTRIB	;PARA HALLAR ASI LA DIRECCION BASE
	ADD	HL,DE

	LD	A,PAG_DATASP
	CALL	SET_VRAM_AD

	LD	HL,SPRITE_TBL
	ADD	HL,DE

	LD	B,C
	SLA	B
	SLA	B	;MULTIPLICAMOS POR 4 EL NUMERO DE

	LD	C,98h
	OTIR
	EI
	RET


;NOMBRE: SET_VRAM_AD
;OBJETIVO: COLOCA EL PUNTERO DE VRAM A UN VALOR
;ENTRADA: HL -> DIRECCION DE VRAM
;         A  -> PAGINA DE VRAM
;MODIFICAA: AF


SET_VRAM_AD:
	DI
	PUSH	AF
	LD	A,L	;Y ENVIRLA COMO PUNTERO RAM
	OUT	(99h),A	;AL VDP
	LD	A,H
	AND	3Fh
	OR	40h
	OUT	(99h),A


	POP	AF		; AHORA ESCRIBO LA PAGINA
	OUT	(99h),A
	LD	A,128+14
	OUT	(99h),A
	EI
	RET






;NOMBRE: LIMPIA_VRAM
;OBJETIVO: PONE TODA LA MEMORIA DE VIDEO AL COLOR QUE SE LE PASA COMO PARAMETRO
;PARAMETROS DE ENTRADA: A -> COLOR


LIMPIA_VRAM:	LD	B,4
	LD	D,3
LIMPVRAM1	PUSH	BC
	PUSH	AF
	LD	B,D
	DEC	D
	LD	HL,LIMPIA_PAND
	CALL	LIMPIA_PAN
	CALL	WAIT_COM

	POP	AF
	POP	BC
	DJNZ	LIMPVRAM1
	RET



;NOMBRE: INITSCR
;OBJETIVO: INICIALIZAR UN MODO GRAFICO
;ENTRADA: A -> MODO DE VIDEO


INITSCR:	LD	IY,(EXBRSA-1)
	LD	IX,CHGMOD
	CALL	CALSLT
	RET



;NOMBRE: VIS_ON
;AUTOR: ROBERTO VARGAS CABALLERO
;OBJETIVO: ESTA FUNCION HABILITA LA VISUALIZACION DE LA PANTALLA ADEMAS
;          DE COLOCAR EL TAMAGNO DE SPRITES A 16x16
;MODIFICA: A



VIS_ON:	DI
	LD	A,(RG1SAV)
	SET	6,A
	LD	(RG1SAV),A
	OUT	(99h),A
	LD	A,128+1
	OUT	(99h),A
	EI
	RET

;NOMBRE: VIS_OFF
;AUTOR: ROBERTO VARGAS CABALLERO
;OBJETIVO: ESTA FUNCION DESHABILITA LA VISUALIZACION DE LA PANTALLA
;          ADEMAS DE COLOCAR EL TAMAGNO DE LOS SPRITES A 16x16
;MODIFICA: A


VIS_OFF:	DI
	LD	A,(RG1SAV)
	RES	6,A
	LD	(RG1SAV),A
	OUT	(99h),A
	LD	A,128+1
	OUT	(99h),A
	EI
	RET


;NOMBRE: SPD_OFF
;OBJETIVO: ESTA FUNCION DESHABILITA LOS SPRITES
;MODIFICA: A


SPD_OFF:	DI
	LD	A,(RG8SAV)
	SET	1,A
	LD	(RG8SAV),A
	OUT	(99h),A
	LD	A,88H
	OUT	(99h),A
	EI
	RET


;NOMBRE: COLOR0_OFF
;OBJETIVO: DESHABILITAR LA FUNCION DE COLOR 0 TRANSPARENTE.
;MODIFICA: AF


COLOR0_OFF:	DI
	LD	A,(RG8SAV)
	SET	5,A
	LD	(RG8SAV),A
	OUT	(99h),A
	LD	A,128+8
	OUT	(99h),A
	EI
	RET



;NOMBRE: SET_CFONDO
;OBJETIVO: COLOCAR UN COLOR DE FONDO.
;ENTRADA: A -> COLOR
;MODIFICA: A


SET_CFONDO:
;;; DI
	OUT	(99h),A
	LD	A,128+7
	OUT	(99h),A
;;; EI
	RET


;NOMBRE: SPD_ON
;OBJETIVO: ESTA FUNCION HABILITA LOS SPRITES
;MODIFICA: A


SPD_ON:	DI
	LD	A,(RG8SAV)
	RES	1,A
	LD	(RG8SAV),A
	OUT	(99h),A
	LD	A,128+8
	OUT	(99h),A
	EI
	RET




;NOMBRE: SET_SPD16
;OBJETIVO: PONER LOS SPRITES EN 16X16


SET_SPD16:	DI
	LD	A,(RG1SAV)
	SET	1,A
	LD	(RG1SAV),A
	OUT	(99h),A
	LD	A,128+1
	OUT	(99h),A
	EI
	RET




;NOMBRE: TESTCOM
;AUTOR: ROBERTO VARGAS CABALLERO
;OBJETIVO: ESTA FUNCIOM COMPRUEBA SI  SE ESTA EJECUTANDO UN COMANDO DEL VDP
;SALIDA: Z: SI SE HA ACABADO EL COMANDO Z VALDAR 0, EN CASO CONTRARIO VALDRA 1
;MODIFICA: AF,AF',C


TESTCOM:	LD	C,99h
	LD	A,2
	DI
	OUT	(C),A
	LD	A,128+15
	OUT	(C),A
	IN	A,(C)
	EX	AF,AF'
	XOR	A
	OUT	(C),A
	LD	A,128+15
	OUT	(C),A
	EI
	EX	AF,AF'
	BIT	0,A
	RET




;NOMBRE: WAIT_COM
;OBJETIVO: ESPERAR HASTA QUE SE PRODUZCA EL FINAL DE UN COMANDO DEL VDP


WAIT_COM:	CALL	TESTCOM
	JR	NZ,WAIT_COM
	RET





;NOMBRE: VER_PAGE
;OBJETIVO: MUESTRA LA PAGINA QUE SE LE PASA COMO PARAMETRO.
;ENTRADA: A: PAGINA QUE SE QUIERE VISUALIZAR
;MODIFICA: AF,B

VER_PAGE:
	LD HL,PAGE0
	LD C,A
	LD B,0
	ADD HL,BC
	LD A,(HL)

	OUT	(99h),A
	LD	A,128+2
	OUT	(99h),A
	RET


PAGE0:		DB 00011111B
PAGE1:		DB 00111111B
PAGE2:		DB 01011111B
PAGE3:		DB 01111111B





;NOMBRE: PUT_PAL
;OBJETIVO: CAMBIAR LA PALETA
;ENTRADA: HL -> PUNTERO A LA PALETA



PUT_PAL:
	DI
	XOR	A
	OUT	(99h),A
	LD	A,128+16
	OUT	(99h),A
	LD	B,32
	LD	C,9Ah
	REPT    32
	OUTI
	ENDM
	EI
	RET


CHANGE_PAL:	DB 0



;NOMBRE: PAINT
;OBJETIVO: PINTA UN MATRIZ EN LA DIRECCION DE VRAM ESPECIFICADA POR PAINTPTR
;          INDEXANDO SEGUN LAS COORDENADAS PASADAS A LA FUNCION
;ENTRADA:  BC: FILAS
;          DE: COLUMNAS
;          IX: COORDENADA XINICIAL
;          IYL: COORDENADA YINICIAL
;          IYH : PAGINA
;          HL: MATRIZ
;MODIFICA: AF,BC,DE,HL


PAINT:	LD	A,(HL)
	LD	(PAINTDATO),A
	INC	HL
	PUSH	HL
	PUSH	IX
	POP	HL
	LD	(PAINTDATAX),HL
	PUSH	IY
	POP	HL
	LD	(PAINTDATAY),HL
	LD	(PAINTANCHO),DE
	LD	(PAINTALTO),BC

	DI
	LD	A,36	;PREPARAMOS LOS REGISTROS CON LOS
	OUT	(99h),A	;VALORES DE ENTRADA PARA LA OPERACION
	LD	A,128+17	;UTILIZANDO PARA ELLO EL DIRECCIONAMIENTO
	OUT	(99h),A	;INDIRECTO CON INCREMENTO

	LD	C,9Bh
	LD	B,11
	LD	HL,PAINTDATAX
	OTIR

	POP	HL

	LD	C,99h
	LD	A,128+44	;COLOCO EL REGISTRO 44 COMO DESTINO
	OUT	(C),A	;DE LA CARGA SIN AUTOINCREMENTO
	LD	A,128+17	;USANDO PARA ELLO EL REGISTRO 17
	OUT	(C),A

	LD	A,2	;COLOCO EL REGISTRO 2 DE LECTURA
	OUT	(C),A	;PARA LOS ACCESOS PARA IN ($99),A
	LD	A,128+15	;Y PODER COMPROBAR ASI EL ESTADO
	OUT	(C),A	;DEL COMANDO

PAINTBUCLE	IN	A,(C)
	BIT	0,A
	JR	Z,PAINTFINAL
	BIT	7,A
	JR	Z,PAINTBUCLE
	LD	A,(HL)
	OUT	(9Bh),A
	INC	HL
	JR	PAINTBUCLE

PAINTFINAL	XOR	A
	OUT	(C),A
	LD	A,128+15
	OUT	(C),A
	EI

	RET

PAINTDATAX	DW	0
PAINTDATAY	DW	0
PAINTANCHO	DW	0
PAINTALTO	DW	0
PAINTDATO	DW	0
		DB	0F0h







;NOMBRE: INTERRUPT
;OBJETIVO: SERVIR COMO VECTOR DE INTERRUPCION

INTERRUPT:	PUSH	AF

	IN	A,(99h)
	ADD	A,A
	JP	NC,NOTVR

	EX	AF,AF'
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY

	LD	A,(PAG_ACT)
	CALL	VER_PAGE	; Tambien activa las interrupciones,Tambien se puede acelerar

	LD	A,(CHANGE_PAL)
	OR	A
	LD	HL,(PAL_GMP)	; Llamar a la funcion solo si es necesario el cambio de paleta
	CALL	PUT_PAL	; que normalmente no lo es
	XOR	A
	LD	(CHANGE_PAL),A

	LD	A,(TIME_)
	OR	A
	JP	Z,ENDTIME
	DEC	A
	LD	(TIME_),A
	JP	N_ENDTIME

ENDTIME	LD	A,(SOL_CHGP)	;LLEGAMOS AL FINAL DEL TIEMPO DE SINCRO
	OR	A
	JR	NZ,N_ENDTIME
	XOR	A
	LD	(SINCRO),A
	LD	(SOL_CHGP),A	; y esta variable para que servia????


N_ENDTIME
;;; LD	A,(MODO_GAME)		;esto no sirve para nada ahora mismo
	CALL	PUT_SPRITE	;hay que llamarla solo cuando esten acrivados los sprites
	CALL	LEETECLA
	LD	A,(LEETECLAV)
	CP	80h
	JR	Z,N_ENDFUNC
	LD	(BUFFER_INT),A

N_ENDFUNC
	LD	A,(LEETFUNC)
	OR	A
	JR	Z,N_ENDTIME1
	LD	(BUFFER_FUNC),A

N_ENDTIME1
	LD A,1
	;; CALL SET_CFONDO

	CALL	PLAY
	EI

	LD A,8
	;; CALL SET_CFONDO

	POP	IY
	POP	IX
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	EX	AF,AF'

RETINT	POP	AF
	EI
	RET


BUFFER_FUNC:	DB	0


;FUNCION QUE SE ENCARGA DE GESTIONAR EL SCREEN SPLIT



NOTVR:	LD	A,1	;PONEMOS EL REGISTRO DE ESTADO 1  ;ESTO SE PODRIA OBVIAR
	OUT	(99h),A	;PARA COMPROBAR EL VALOR DEL FLAG
	LD	A,128+15	;INTERRUPCION HORIZONTAL
	OUT	(99h),A

	IN	A,(99h)
	RRCA
	JP	NC,NOTVR_RI

	PUSH	HL
	PUSH    BC
;                                       ;SCREENSPLIT DE ABAJO
NOTVRAB	LD	C,99h
	LD	HL,((128+2)*256)+1Fh

	OUT	(C),L
	OUT	(C),H
	POP	BC
	POP     HL

NOTVR_RI
	XOR	A
	OUT	(99h),A
	LD	A,128+15
	OUT	(99h),A

	POP	AF
	EI
	RETI

PAL_GMP:	DW	PAL_GM
PAL_GM:		DS 	32


BUFFER_INT:	DB	0
FUNCT_INT:	DB	0




PAL_NEGRO:	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

PAL_ODDYSEA:
		DB	40h,3,21h,5,20h,3,47h,5,62h,4,31h,2,15h,3
		DB	63h,3,74h,5,53h,4,41h,1,65h,6,77h,7,0,0,32h,3,43h,4

PAL_MARK:	DB	40h,3,70h,5,20h,4,31h,6,60h,2,31h,2,63h,4,47h,5,74h,5
		DB	15h,3,50h,1,65h,6,77h,7,0,0,32h,3,43h,4






;NOMBRE: SETVDP_LI
;OBJETIVO: ACTIVAR LAS INTERRUPCIONES HORIZONTALES, ADEMAS DE COLOCAR LA LINEA


SETVDP_LI:	DI
	LD	A,SCR_SPLIT
	OUT	(99h),A
	LD	A,128+19
	OUT	(99h),A

	LD	A,(RG0SAV)
	SET	4,A
	OUT	(99h),A
	LD	A,128+0
	OUT	(99h),A
	EI
	RET


;NOMBRE: RESVDP_LI
;OBJETIVO: DESACTIVAR LAS INTERRUPCIONES HORIZONTALES


RESVDP_LI:	DI
	LD	A,(RG0SAV)
	RES	4,A
	OUT	(99h),A
	LD	A,128+0
	OUT	(99h),A
	EI
	RET






;NOMBRE: LIMPIA_PAN
;OBJETIVO: RELLENA UNA PAGINA CON UN COLOR ESPECIFICO.
;ENTRADA: A  -> COLOR
;         B  -> NUMERO DE PAGINA
;         HL -> PUNTERO A LOS DATOS

LIMPIA_PAN:
	EX	DE,HL
	LD	HL,8
	ADD	HL,DE
	LD	(HL),A
	LD	HL,3
	ADD	HL,DE
	LD	(HL),B
	EX	DE,HL

	DI
	LD	A,24h
	OUT	(99h),A
	LD	A,91h
	OUT	(99h),A
	LD	C,9Bh
	LD	B,0Bh
	OTIR
	EI
	RET


SPRITE_TBL:	DS 4*MAXNUMSP
LIMPIA_PAND:	DB 0,0,0,0,0,1,0,1,0FFh,0,0C0h
LIMPIA_SCR:	DB OFF_PANTX,0,OFF_PANTY,0,NUMPATX*8,0,NUMPATY*8,0,0FFh,0,0C0h





;NOMBRE: FADE_OFF
;OBJETIVO: HACER UN FADE A NEGRO DE LA PALETA ACTUAL


FADE_OFF:
	LD	HL,PAL_ODDYSEA
	LD	DE,PALETAW
	LD	BC,32
	LDIR
	LD	HL,PAL_NEGRO
	LD	(PALETAD),HL
	JR	PUT_FADET



;NOMBRE: FADE_ON
;OBJETIVO: HACER UN FADE DE NEGRO A LA PALETA ACTUAL


FADE_ON:
	LD	HL,PAL_NEGRO
	LD	DE,PALETAW
	LD	BC,32
	LDIR
	LD	HL,PAL_ODDYSEA
	LD	(PALETAD),HL


PUT_FADET:
	LD	B,16	;ESTA LA QUE REALMENTE SE ENCARGA DE
;                                       ;HACER LOS FADES
PFADE_OFFB	PUSH	BC
PFADE_OFFW	LD	A,(TIME_)
	OR	A
	JR	NZ,PFADE_OFFW

	LD	DE,(PALETAD)
	LD	IX,PALETAW
	LD	HL,PALETAW
	CALL	DOFADE


	LD	HL,PALETAW
	LD	DE,PAL_GM
	LD	BC,32
	LDIR

	DI
	LD	A,1
	LD	(CHANGE_PAL),A
	LD	A,TIMEFADE
	LD	(TIME_),A
	EI

	POP	BC
	DJNZ	PFADE_OFFB

	RET

PALETAD:	DW	0
PALETAW:	DS	32





;NOMBRE: DOFADE
;OBJETIVO: REALIZA UN PASO DE FADE ENTRE DOS PALETAS
;ENTRADA: HL -> PALETA INICIAL
;         DE -> PALETA DESTINO
;SALIDA: (IX)-> RESULTADO DEL FADE




DOFADE:	LD	B,32

DOFADE1	PUSH	BC
	LD	A,(HL)
	AND	7
	LD	C,A
	LD	A,(DE)
	AND	7
	CP	C
	JR	Z,DOFADEIG
	JR	C,DOFADEMAY
	INC	C
	JR	DOFADEIG
DOFADEMAY	DEC	C

DOFADEIG	LD	A,(HL)
	AND	70h
	LD	B,A
	LD	A,(DE)
	AND	70h
	CP	B
	JR	Z,DOFADEIG2
	JR	C,DOFADEMAY2
	LD	A,B
	ADD	A,16
	LD	B,A
	JR	DOFADEIG2
DOFADEMAY2	LD	A,B
	SUB	16
	LD	B,A
DOFADEIG2	LD	A,C
	ADD	A,B
	LD	(IX),A
	INC	IX
	INC	HL
	INC	DE
	POP	BC
	DJNZ	DOFADE1

	RET





